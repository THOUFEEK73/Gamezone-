

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-gray-100 font-sans">
    <%- include('partials/sidebar') %>
  <div class="max-w-7xl mx-auto p-4">
    <!-- Header -->
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold text-gray-800">Admin Dashboard</h1>
      <!-- <select id="filterSelect" class="border px-4 py-2 rounded-md shadow-sm text-sm">
        <option value="monthly">Monthly</option>
        <option value="daily">Daily</option>
        <option value="yearly">Yearly</option>
      </select> -->
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
      <div class="bg-white p-4 rounded shadow">
        <p class="text-sm text-gray-500">Total Revenue</p>
        <h2 id="totalRevenue" class="text-2xl font-bold text-green-600">₹<%= totalRevenue.toLocaleString('en-IN') %></h2>
        <p class="text-xs text-green-500 mt-1">↑ 11%</p>
      </div>
      <div class="bg-white p-4 rounded shadow">
        <p class="text-sm text-gray-500">Total Orders</p>
        <h2 id="totalOrders" class="text-2xl font-bold text-blue-600"><%=totalOrders%></h2>
        <p class="text-xs text-green-500 mt-1">↑ 11%</p>
      </div>
      <div class="bg-white p-4 rounded shadow">
        <p class="text-sm text-gray-500">Total Customers</p>
        <h2 id="totalCustomers" class="text-2xl font-bold text-green-600"><%=totalCustomers%></h2>
        <p class="text-xs text-red-500 mt-1">↓ 17%</p>
      </div>
      <div class="bg-white p-4 rounded shadow">
        <p class="text-sm text-gray-500">Pending Delivery</p>
        <h2 id="pendingDelivery" class="text-2xl font-bold text-yellow-600"><%=pendingDelivery%></h2>
        <p class="text-xs text-green-500 mt-1">↑ 3%</p>
      </div>
    </div>
    

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6">
      <!-- Sales Analytics with Month Dropdown -->
      <div class="lg:col-span-2 bg-white p-6 rounded shadow">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">Sales Analytics</h2>
          <div class="flex gap-2">
            <select id="filterSelect" class="text-sm border rounded px-3 py-2">
              <option value="monthly">Monthly</option>
              <option value="daily">Daily</option>
              <option value="custom">Custom</option>
            </select>
            <input type="date" id="fromDate" class="text-sm border rounded px-3 py-2" disabled>
            <span class="text-sm flex items-center">to</span>
            <input type="date" id="toDate" class="text-sm border rounded px-3 py-2" disabled>
          </div>
        </div>
        <canvas id="salesChart" height="100"></canvas>
      </div>
    
      <!-- Sales Target -->
      <div class="bg-white p-6 rounded shadow">
        <h2 class="text-xl font-semibold mb-4">Sales Target</h2>
        <div class="flex items-center justify-center h-40">
          <div class="relative w-32 h-32">
            <canvas id="salesTargetChart"></canvas>
            <div class="absolute inset-0 flex flex-col items-center justify-center">
              <span class="text-sm text-gray-500" id="targetTypeLabel">Monthly</span>
              <span class="font-bold text-lg" id="monthlyTargetValue">0,000</span>
            </div>
          </div>
        </div>
        <div class="text-center mt-4">
          <p class="text-sm text-gray-600">Daily Target: <span class="font-semibold text-gray-800" id="dailyTargetValue">0,000</span></p>
        </div>
      </div>
    </div>
    

    <!-- Top 10 Sections -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
      <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Top 10 Products</h2>
        <ul id="topProducts" class="text-sm text-gray-700 space-y-2">
        
        </ul>
      </div>
      <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Top 10 Categories</h2>
        <ul id="topCategories" class="text-sm text-gray-700 space-y-1"></ul>
      </div>
      <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Top 10 Brands</h2>
        <ul id="topBrands" class="text-sm text-gray-700 space-y-1"></ul>
      </div>
    </div>

    <!-- Ledger Book (Optional) -->
    <!-- <div class="bg-white p-4 rounded shadow">
      <h2 class="text-lg font-semibold mb-2">Ledger Book</h2>
      <p class="text-gray-600 text-sm">This section can be used for exporting or viewing transactional ledgers.</p>
    </div> -->
  </div>

  <script>
    let salesChart;
    
    // Render or update the sales chart
    function renderSalesChart(labels, data) {
      const ctx = document.getElementById('salesChart').getContext('2d');
      if (salesChart) {
        salesChart.data.labels = labels;
        salesChart.data.datasets[0].data = data;
        salesChart.update();
      } else {
        salesChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'Income',
              data: data,
              backgroundColor: 'rgba(52, 211, 153, 0.5)',
              borderColor: '#34D399',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: { display: true }
            },
            scales: {
              y: {
                beginAtZero: true,
                min: 0,
                max: 50000,
                ticks: {
                  stepSize: 10000,
                  callback: function(value) {
                    return '₹' + value.toLocaleString('en-IN');
                  }
                }
              }
            }
          }
        });
      }
    }
    
    // Update Top 10 lists
    function updateTopList(elementId, items, isProduct = false) {
  const list = document.getElementById(elementId);
  list.innerHTML = '';
  if (Array.isArray(items)) {
    items.forEach(item => {
      if (isProduct) {
        list.innerHTML += `<li class="flex items-center gap-2">
          <img src="${item.coverImage || 'https://via.placeholder.com/40'}" class="w-10 h-10 rounded" alt="Product"/>
          <span>${item.title}</span>
          <span class="ml-auto text-xs text-gray-500">x${item.totalSold || 0}</span>
        </li>`;
      } else {
        list.innerHTML += `<li>${item.name || item}</li>`;
      }
    });
  }
}
    
    // Fetch and update dashboard data
    async function fetchDashboardData(filter) {
      try {
        let url = `/admin/dashboard-filter?filter=${filter}`;
        if (filter === 'custom') {
          const from = document.getElementById('fromDate').value;
          const to = document.getElementById('toDate').value;
          if (from && to) {
            url += `&from=${from}&to=${to}`;
          }
        }
        const response = await fetch(url);
        const data = await response.json();
        document.getElementById('totalRevenue').textContent = '₹' + Number(data.totalRevenue).toLocaleString('en-IN');
        document.getElementById('totalOrders').textContent = data.totalOrders;
        document.getElementById('totalCustomers').textContent = data.totalCustomers;
        document.getElementById('pendingDelivery').textContent = data.pendingDelivery;
    
        if (data.salesChart) {
          renderSalesChart(data.salesChart.labels, data.salesChart.data);
        }
        updateTopList('topProducts', data.topProducts, true);
        updateTopList('topCategories', data.topCategories);
        updateTopList('topBrands', data.topBrands);
    
        // --- Dynamic Sales Target ---
        if (data.monthlyTarget !== undefined) {
          document.getElementById('monthlyTargetValue').textContent = Number(data.monthlyTarget).toLocaleString('en-IN');
        }
        if (data.dailyTarget !== undefined) {
          document.getElementById('dailyTargetValue').textContent = Number(data.dailyTarget).toLocaleString('en-IN');
        }
        // Optionally update the label if you want to show which target is being displayed
        if (filter === 'daily') {
          document.getElementById('targetTypeLabel').textContent = 'Daily';
        } else {
          document.getElementById('targetTypeLabel').textContent = 'Monthly';
        }
    
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    }
    
    // Enable/disable date inputs for custom filter
    document.getElementById('filterSelect').addEventListener('change', function() {
      const isCustom = this.value === 'custom';
      document.getElementById('fromDate').disabled = !isCustom;
      document.getElementById('toDate').disabled = !isCustom;
      fetchDashboardData(this.value);
    });
    
    // Listen for date changes in custom filter
    document.getElementById('fromDate').addEventListener('change', function() {
      if (document.getElementById('filterSelect').value === 'custom') {
        fetchDashboardData('custom');
      }
    });
    document.getElementById('toDate').addEventListener('change', function() {
      if (document.getElementById('filterSelect').value === 'custom') {
        fetchDashboardData('custom');
      }
    });
    
    // Fetch initial data on page load
    window.addEventListener('DOMContentLoaded', function() {
      fetchDashboardData(document.getElementById('filterSelect').value);
    });
    
    // Sales Target Chart (Doughnut)
    const salesTargetChart = new Chart(document.getElementById('salesTargetChart'), {
      type: 'doughnut',
      data: {
        labels: ['Completed', 'Remaining'],
        datasets: [{
          data: [65, 35],
          backgroundColor: ['#10B981', '#E5E7EB'],
          borderWidth: 0
        }]
      },
      options: {
        cutout: '75%',
        plugins: {
          legend: { display: false }
        }
      }
    });



    </script>
</body>

</html>
