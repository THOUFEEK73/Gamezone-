<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>GameZone Admin - Categories</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <link rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
        <link
            href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
            rel="stylesheet">
            <style>
               /* Base Styles */
body {
  background-color: #ffffff;
  color: #1f2937; /* Slightly darker text for readability */
  font-family: sans-serif;
}

/* Card Component */
.card {
  background-color: #ffffff;
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  transition: all 0.2s ease-in-out;
}

/* Category List Item */
.category-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem;
  border-bottom: 1px solid #e5e7eb;
  background-color: #ffffff;
  transition: background 0.2s ease-in-out;
}

.category-item:last-child {
  border-bottom: none;
}

.category-item:hover {
  background-color: #f9fafb;
}

/* Actions */
.category-actions {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

.action-btn {
  padding: 0.5rem;
  border-radius: 0.5rem;
  transition: background 0.2s ease-in-out;
}

.edit-btn {
  color: #4f46e5;
}

.edit-btn:hover {
  background-color: rgba(99, 102, 241, 0.1);
}

.delete-btn {
  color: #dc2626;
}

.delete-btn:hover {
  background-color: rgba(239, 68, 68, 0.1);
}

/* Search Input */
.search-input {
  background-color: #ffffff;
  border: 1px solid #e5e7eb;
  color: #111827;
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  width: 100%;
}

.search-input:focus {
  outline: none;
  border-color: #6366f1;
  box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
}

/* Status Badge */
.status-badge {
  padding: 0.25rem 0.75rem;
  border-radius: 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.status-active {
  background-color: rgba(34, 197, 94, 0.15);
  color: #16a34a;
}

.status-inactive {
  background-color: rgba(239, 68, 68, 0.15);
  color: #dc2626;
}

/* Modal Styles */
.modal {
  background: rgba(0, 0, 0, 0.2);
}

.modal-content {
  background: #ffffff;
  color: #1f2937;
  border-radius: 0.5rem;
}

/* Form Elements */
.form-label {
  color: #1f2937;
  font-weight: 500;
}

.form-input {
  background-color: #f9fafb;
  border: 1px solid #e5e7eb;
  color: #111827;
  padding: 0.75rem;
  border-radius: 0.5rem;
}

.form-input:focus {
  border-color: #6366f1;
  box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
  outline: none;
}

/* Buttons */
.btn-cancel {
  background-color: #f9fafb;
  color: #111827;
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  padding: 0.5rem 1rem;
}

.btn-cancel:hover {
  background-color: #e5e7eb;
}

.btn-submit {
  background-color: #6366f1;
  color: #ffffff;
  border-radius: 0.5rem;
  padding: 0.5rem 1rem;
  border: none;
}

.btn-submit:hover {
  background-color: #4f46e5;
}

/* Pagination */
.pagination {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 2rem;
}

.page-item {
  padding: 0.5rem 1rem;
  background-color: #ffffff;
  border: 1px solid #e5e7eb;
  color: #1f2937;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: background 0.2s ease-in-out;
}

.page-item:hover {
  background-color: #f3f4f6;
}

.page-item.active {
  background-color: #6366f1;
  color: #ffffff;
  border-color: #6366f1;
}

.page-item.disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

                </style>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    </head>
    <body class="flex h-screen">
        <%- include('partials/sidebar') %>

        <!-- Main Content -->
        <div class="flex-1 ml-72 p-4 sm:p-8 bg-white min-h-screen">
            <!-- Header -->
            <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-8">
              <div>
                <h1 class="text-3xl sm:text-4xl font-bold text-gray-900">Game Categories</h1>
                <p class="text-gray-500 mt-1">Manage your game categories</p>
              </div>
              <button id="addCategoryBtn"
                class="flex items-center gap-2 px-5 py-2.5 bg-purple-600 text-white rounded-lg shadow hover:bg-purple-700 transition-all text-base font-medium">
                <i class="fas fa-plus"></i>
                <span>Add Category</span>
              </button>
            </div>
          
            <!-- Search & Filter -->
            <!-- <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <div class="col-span-3">
                <input type="text" id="searchInput"
                  class="w-full border border-gray-300 rounded-lg px-4 py-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-purple-500"
                  placeholder="Search categories..." />
              </div>
              <div>
                <select id="statusFilter"
                  class="w-full border border-gray-300 rounded-lg px-4 py-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-purple-500">
                  <option value="all">All Status</option>
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                </select>
              </div>
            </div> -->
            <form method="GET" action="/admin/category" class="flex flex-col sm:flex-row gap-2 mb-6">
                <div class="relative flex-1">
                    <input
                      id="searchInput"
                      type="text"
                      name="search"
                      value="<%= search || '' %>"
                      placeholder="Search categories..."
                      class="search-input w-full pr-10"
                      autocomplete="off"
                    />
                    <button
                      type="button"
                      id="clearSearchBtn"
                      class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-700 focus:outline-none"
                      style="<%= search ? '' : 'display:none;' %>"
                      tabindex="-1"
                      aria-label="Clear search"
                    >
                      <i class="fas fa-times-circle text-lg"></i>
                    </button>
                  </div>
                <select name="status" class="search-input w-48">
                  <option value="all" <%= status === 'all' ? 'selected' : '' %>>All Status</option>
                  <option value="active" <%= status === 'active' ? 'selected' : '' %>>Active</option>
                  <option value="inactive" <%= status === 'inactive' ? 'selected' : '' %>>Inactive</option>
                </select>
                <button type="submit" class="btn-submit">Search</button>
              </form>
          
            <!-- Categories List -->
          <!-- Categories List -->
<div class="space-y-4">
    <% if (category && category.length > 0) { %>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <% category.forEach(category => { %>
          <div class="category-item flex flex-col justify-between bg-white border border-gray-200 rounded-xl shadow-sm hover:shadow-lg transition-all p-6 group">
            <div class="flex items-center justify-between w-full mb-4">
              <div class="text-xl font-semibold text-gray-900 truncate">
                <%= category.categoryName %>
              </div>
              <span class="status-badge <%= category.status === 'active' ? 'status-active' : 'status-inactive' %> flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium">
                <i class="fas fa-circle text-xs"></i>
                <%= category.status === 'active' ? 'Active' : 'Inactive' %>
              </span>
            </div>
            <div class="flex items-center gap-3 mt-2">
              <button class="action-btn edit-btn flex items-center gap-1 px-3 py-2 rounded-lg bg-gray-100 hover:bg-purple-100 text-purple-700 transition"
                data-category-id="<%= category._id %>"
                data-category-name="<%= category.categoryName %>"
                title="Edit">
                <i class="fas fa-edit"></i>
                <span class="hidden sm:inline">Edit</span>
              </button>
              <button class="status-toggle flex items-center gap-2 px-3 py-2 rounded-lg bg-gray-100 hover:bg-green-100 text-green-600 transition"
              data-category-id="<%= category._id %>" data-status="<%= category.status %>"
              title="Toggle Status">
              <i class="fas fa-toggle-<%= category.status === 'active' ? 'on' : 'off' %> <%= category.status === 'active' ? 'text-green-500' : 'text-red-500' %>"></i>
            </button>
            </div>
          </div>
        <% }); %>
      </div>
    <% } else { %>
      <div class="p-4 bg-white border border-gray-200 rounded-lg text-center text-gray-500">
        No categories found
      </div>
    <% } %>
  </div>
            <!-- Pagination -->
            <div class="flex justify-center mt-10">
              <nav class="flex space-x-2">
                <% if (currentPage > 1) { %>
                  <a href="/admin/category?page=<%= currentPage - 1 %>"
                    class="page-item">Previous</a>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                  <a href="/admin/category?page=<%= i %>"
                    class="page-item <%= currentPage === i ? 'active' : '' %>"><%= i %></a>
                <% } %>
                <% if (currentPage < totalPages) { %>
                  <a href="/admin/category?page=<%= currentPage + 1 %>"
                    class="page-item">Next</a>
                <% } %>
              </nav>
            </div>
          </div>

        <!-- Add Category Modal -->
        <div id="addCategoryModal"
        class="modal fixed inset-0 bg-black bg-opacity-40 z-50 hidden items-center justify-center">
      <div class="modal-content bg-white p-8 rounded-xl w-full max-w-md mx-4 shadow-lg relative">
        <button class="modal-close absolute top-4 right-4 text-gray-400 hover:text-gray-700" id="closeAddModal">
          <i class="fas fa-times"></i>
        </button>
        <div class="modal-header mb-6">
          <h2 class="text-2xl font-bold text-gray-900">Add New Category</h2>
        </div>
        <form id="addCategoryForm" action="/admin/category" method="POST">
          <div class="mb-6">
            <label class="block text-gray-700 mb-2 font-medium" for="categoryName">Category Name</label>
            <input type="text" id="categoryName" name="categoryName"
              class="form-input w-full px-4 py-2 rounded-lg border border-gray-300 text-gray-900 focus:outline-none focus:border-purple-500"
              placeholder="Enter category name" autocomplete="off">
          </div>
          <div class="flex justify-end space-x-3">
            <button type="button" id="cancelAdd"
              class="btn-cancel px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
              Cancel
            </button>
            <button type="submit"
              class="btn-submit px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
              Add Category
            </button>
          </div>
        </form>
      </div>
    </div>
        <!-- Edit Category Modal -->

        <div id="editCategoryModal"
    class="modal fixed inset-0 bg-black bg-opacity-40 z-50 hidden items-center justify-center">
  <div class="modal-content bg-white p-8 rounded-xl w-full max-w-md mx-4 shadow-lg relative">
    <button class="modal-close absolute top-4 right-4 text-gray-400 hover:text-gray-700" id="closeEditModal">
      <i class="fas fa-times"></i>
    </button>
    <div class="modal-header mb-6">
      <h2 class="text-2xl font-bold text-gray-900">Edit Category</h2>
    </div>
    <form id="editCategoryForm" method="POST" action="/admin/category">
      <input type="hidden" id="editCategoryId" name="categoryId">
      <div class="mb-6">
        <label class="block text-gray-700 mb-2 font-medium" for="editCategoryName">Category Name</label>
        <input type="text" id="editCategoryName" name="categoryName"
          class="form-input w-full px-4 py-2 rounded-lg border border-gray-300 text-gray-900 focus:outline-none focus:border-purple-500"
          placeholder="Enter category name" autocomplete="off">
      </div>
      <div class="flex justify-end space-x-3">
        <button type="button" id="cancelEdit"
          class="btn-cancel px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
          Cancel
        </button>
        <button type="submit"
          class="btn-submit px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
          Update Category
        </button>
      </div>
    </form>
  </div>
</div>

        <script>



        // Sidebar Navigation Groups
        document.querySelectorAll('.nav-group-header').forEach(header => {
            header.addEventListener('click', () => {
                const content = header.nextElementSibling;
                const toggle = header.querySelector('.nav-group-toggle');
                
                content.classList.toggle('show');
                toggle.classList.toggle('rotated');
            });
        });

        // Mobile Sidebar Toggle
        // const sidebarToggle = document.querySelector('.sidebar-toggle');
        // const sidebar = document.querySelector('.sidebar');

        // sidebarToggle.addEventListener('click', () => {
        //     sidebar.classList.toggle('show');
        // });

        // // Close sidebar when clicking outside on mobile
        // document.addEventListener('click', (e) => {
        //     if (window.innerWidth <= 768) {
        //         if (!sidebar.contains(e.target) && !sidebarToggle.contains(e.target)) {
        //             sidebar.classList.remove('show');
        //         }
        //     }
        // });

        document.querySelectorAll('.status-toggle').forEach(toggle => {
            toggle.addEventListener('click', async () => {
                const categoryId = toggle.dataset.categoryId;
                const currentStatus = toggle.dataset.status;
                const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
                toggle.disabled = true;

                try {
                    const response = await fetch(`/admin/category/${categoryId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ status: newStatus })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        const categoryItem = toggle.closest('.category-item');
                        const statusBadge = categoryItem.querySelector('.status-badge');
                        const statusIcon = toggle.querySelector('i');

                        // Update status badge
                        statusBadge.className = `status-badge status-${newStatus}`;
                        statusBadge.innerHTML = `
                            <i class="fas fa-circle text-xs"></i>
                            ${newStatus === 'active' ? 'Active' : 'Inactive'}
                        `;

                        // Update toggle button icon and color
                        statusIcon.className = `fas fa-toggle-${newStatus === 'active' ? 'on' : 'off'} ${newStatus === 'active' ? 'text-green-500' : 'text-red-500'}`;
                        
                        // Update data-status attribute
                        toggle.dataset.status = newStatus;
                    }
                } catch (error) {
                    console.error('Error updating category status:', error);
                   
                    Swal.fire({
    title: 'Failed!',
    text: 'Error updating category status. Please try again.'+ data.message,
    icon: 'error',
    confirmButtonText: 'OK'
  });
                } finally {
                    toggle.disabled = false;
                }
            });
        });

        // Add Category Modal Functionality
        const addCategoryModal = document.getElementById('addCategoryModal');
        const addCategoryBtn = document.getElementById('addCategoryBtn');
        const closeAddModal = document.getElementById('closeAddModal');
        const cancelAdd = document.getElementById('cancelAdd');
        const addCategoryForm = document.getElementById('addCategoryForm');

        

        // Show modal
        addCategoryBtn.addEventListener('click', () => {
            addCategoryModal.classList.remove('hidden');
            addCategoryModal.classList.add('flex');
        });

        // Hide modal function
        const hideAddModal = () => {
            addCategoryModal.classList.add('hidden');
            addCategoryModal.classList.remove('flex');
            addCategoryForm.reset(); // Reset the form when closing
        };

        // Close modal with X button
        closeAddModal.addEventListener('click', hideAddModal);

        // Close modal with Cancel button
        cancelAdd.addEventListener('click', hideAddModal);

        // Close modal when clicking outside
        addCategoryModal.addEventListener('click', (e) => {
            if (e.target === addCategoryModal) {
                hideAddModal();
            }
        });

        const editCategoryModal = document.getElementById('editCategoryModal');
const closeEditModal = document.getElementById('closeEditModal');
const cancelEdit = document.getElementById('cancelEdit');
const editCategoryForm = document.getElementById('editCategoryForm');

// Attach event listeners to all edit buttons
document.querySelectorAll('.edit-btn').forEach(button => {
  button.addEventListener('click', () => {
    // Get category data from button attributes
    const categoryId = button.getAttribute('data-category-id');
    const categoryName = button.getAttribute('data-category-name');

    // Fill the form inputs with current data
    document.getElementById('editCategoryId').value = categoryId;
    document.getElementById('editCategoryName').value = categoryName;

    // Show modal
    editCategoryModal.classList.remove('hidden');
    editCategoryModal.classList.add('flex');
  });
});

// Hide modal function
const hideEditModal = () => {
  editCategoryModal.classList.add('hidden');
  editCategoryModal.classList.remove('flex');
  editCategoryForm.reset(); // Reset the form when closing
};

// Close modal with X button
closeEditModal.addEventListener('click', hideEditModal);

// Close modal with Cancel button
cancelEdit.addEventListener('click', hideEditModal);

// Close modal when clicking outside the modal content
editCategoryModal.addEventListener('click', (e) => {
  if (e.target === editCategoryModal) {
    hideEditModal();
  }
});



        // Handle form submission
        addCategoryForm.addEventListener('submit', async (e) => {
            console.log('Form submitted');
            e.preventDefault();
            const formData = new FormData(addCategoryForm);
   
            try {
                const response = await fetch('/admin/category/aa', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        categoryName: formData.get('categoryName')
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    // Reload the page to show the new category
                    Swal.fire({
    title: 'Success!',
    text: 'Category added SuccessFullt.' + data.message,
    icon: 'success',
    confirmButtonText: 'OK'
  }).then(()=>{
      window.location.reload()
  })
                    

                } else {
                   
                    Swal.fire({
    title: 'Failed!',
    text: 'Failed to add category. Please try again.' + data.message,
    icon: 'error',
    confirmButtonText: 'OK'
  }).then(()=>{
        window.location.reload()
  })
         
                }
            } catch (error) {
                console.error('Error adding category:', error);
              
                Swal.fire({
    title: 'Failed!',
    text: 'Error adding category. Please try again.' + data.message,
    icon: 'error',
    confirmButtonText: 'OK'
  });
            }
        });


        editCategoryForm.addEventListener('submit',async(e)=>{
            e.preventDefault();
            const formData = new FormData(editCategoryForm);
            const categoryId = formData.get('categoryId');
           const categoryName = formData.get('categoryName');

           try{
            const response = await fetch(`/admin/category/update/${categoryId}`,{
                 
                method:'POST',
                headers:{
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({categoryName: categoryName}) 
                });
            const data = await response.json();

            if(data.success){
                window.location.reload();
                Swal.fire({
    title: 'Success!',
    text: 'Category updated successfully!',
    icon: 'success',
    confirmButtonText: 'OK'
  }).then(() => {
    // Reload page after user clicks OK
    window.location.reload();
  });
                
            }else{
                Swal.fire({
    title: 'Failed!',
    text: 'Failed to update category: ' + data.message,
    icon: 'error',
    confirmButtonText: 'OK'
  }).then(()=>{
     window.location.reload();
  })
            }
           }catch(err){
              console.error('Error updating category:',err);
              Swal.fire({
    title: 'Error!',
    text: 'Error updating category. Please try again.',
    icon: 'error',
    confirmButtonText: 'OK'
  });
           }
        })



        function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}


const searchInput = document.getElementById('searchInput');
const clearSearchBtn = document.getElementById('clearSearchBtn');

const handleSearch = debounce((searchTerm) => {
    const normalizedSearchTerm = searchTerm.toLowerCase().trim();
    
    document.querySelectorAll('.category-item').forEach(item => {
        const categoryName = item.querySelector('.text-lg').textContent.toLowerCase().trim();
        
        if (categoryName.includes(normalizedSearchTerm)) {
            item.style.display = '';
        } else {
            item.style.display = 'none';
        }
    });
}, 300);

// Add event listener for search input
if (searchInput && clearSearchBtn) {
  searchInput.addEventListener('input', () => {
    clearSearchBtn.style.display = searchInput.value ? '' : 'none';
  });

  clearSearchBtn.addEventListener('click', () => {
    searchInput.value = '';
    clearSearchBtn.style.display = 'none';
    searchInput.form.submit(); // Submit the form to reset search
  });
}

// const statusFilter = document.getElementById('statusFilter');
// if (statusFilter) {
//     statusFilter.addEventListener('change', () => {
//         const selectedStatus = statusFilter.value;
        
//         document.querySelectorAll('.category-item').forEach(item => {
//             const statusBadge = item.querySelector('.status-badge');
//             const itemStatus = statusBadge.classList.contains('status-active') ? 'active' : 'inactive';
            
//             if (selectedStatus === 'all' || selectedStatus === itemStatus) {
//                 item.style.display = '';
//             } else {
//                 item.style.display = 'none';
//             }
//         });
//     });
// }
 

    </script>
    </body>
</html>
