<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GameZone Admin - Categories</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-bg: #f8fafc;
            --secondary-bg: #ffffff;
            --accent-color: #4f46e5;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        body {
            background-color: var(--primary-bg);
            color: var(--text-primary);
            min-height: 100vh;
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
        }

        .sidebar {
            background-color: var(--secondary-bg);
            border-right: 1px solid var(--border-color);
            position: fixed;
            left: 0;
            top: 0;
            height: 100vh;
            width: 280px;
            overflow-y: auto;
            z-index: 50;
            transition: all 0.3s ease;
        }

        .card {
            background-color: var(--secondary-bg);
            border-radius: 1rem;
            box-shadow: var(--card-shadow);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .nav-group {
            position: relative;
        }

        .nav-group-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            padding: 0.75rem 1rem;
            border-radius: 0.75rem;
            transition: all 0.2s ease;
        }

        .nav-group-header:hover {
            background: rgba(79, 70, 229, 0.1);
        }

        .nav-group-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
        }

        .nav-group-content.show {
            max-height: 500px;
        }

        .nav-group-toggle {
            transition: transform 0.3s ease;
        }

        .nav-group-toggle.rotated {
            transform: rotate(180deg);
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--text-secondary);
            border-radius: 0.75rem;
            transition: all 0.2s ease;
            margin-bottom: 0.25rem;
        }

        .nav-link:hover {
            background: rgba(79, 70, 229, 0.1);
            color: var(--accent-color);
            transform: translateX(4px);
        }

        .nav-link.active {
            background: rgba(79, 70, 229, 0.2);
            color: var(--accent-color);
        }

        .nav-link i {
            width: 20px;
            margin-right: 0.75rem;
            text-align: center;
        }

        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 1rem;
        }

        .sidebar-logo {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }

        .sidebar-logo i {
            font-size: 1.75rem;
            color: var(--accent-color);
            margin-right: 0.75rem;
        }

        .sidebar-logo h1 {
            font-size: 1.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #4f46e5, #7c3aed);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .sidebar-footer {
            padding: 1.5rem;
            border-top: 1px solid var(--border-color);
            margin-top: auto;
        }

        .user-profile {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            border-radius: 0.75rem;
            background: rgba(79, 70, 229, 0.1);
            transition: all 0.2s ease;
        }

        .user-profile:hover {
            background: rgba(79, 70, 229, 0.2);
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 0.75rem;
            border: 2px solid var(--accent-color);
        }

        .user-info {
            flex: 1;
        }

        .user-name {
            font-weight: 600;
            color: var(--text-primary);
        }

        .user-role {
            font-size: 0.75rem;
            color: var(--text-secondary);
        }

        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                width: 280px;
            }

            .sidebar.show {
                transform: translateX(0);
            }

            .sidebar-toggle {
                display: block;
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 100;
                background: var(--secondary-bg);
                border: 1px solid var(--border-color);
                border-radius: 0.5rem;
                padding: 0.5rem;
                cursor: pointer;
                box-shadow: var(--card-shadow);
            }

            .main-content {
                margin-left: 0 !important;
                padding: 1rem;
            }
        }

        .sidebar::-webkit-scrollbar {
            display: none;
        }

        .sidebar {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }

        .category-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
            transition: all 0.2s ease;
        }

        .category-item:last-child {
            border-bottom: none;
        }

        .category-item:hover {
            background: rgba(79, 70, 229, 0.05);
        }

        .category-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border-radius: 0.5rem;
            transition: all 0.2s ease;
        }

        .edit-btn {
            color: var(--accent-color);
        }

        .edit-btn:hover {
            background: rgba(79, 70, 229, 0.1);
        }

        .delete-btn {
            color: #ef4444;
        }

        .delete-btn:hover {
            background: rgba(239, 68, 68, 0.1);
        }

        /* Search and Filter Styles */
        .search-container {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .search-input {
            flex: 1;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.875rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .status-badge.status-active {
        background: rgba(34, 197, 94, 0.1);
        color: #16a34a;
    }

    .status-badge.status-inactive {
        background: rgba(239, 68, 68, 0.1);
        color: #dc2626;
    }

    .status-toggle i.text-green-500 {
        color: #22c55e;
    }

    .status-toggle i.text-red-500 {
        color: #ef4444;
    }

        .status-toggle:hover {
            background: rgba(0, 0, 0, 0.05);
        }

        /* Pagination Styles */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 2rem;
        }

        .page-item {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .page-item:hover {
            background: var(--primary-bg);
        }

        .page-item.active {
            background: var(--accent-color);
            color: white;
            border-color: var(--accent-color);
        }

        .page-item.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            width: 100%;
            max-width: 500px;
            position: relative;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .modal-close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--text-secondary);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 0.5rem;
            transition: all 0.2s ease;
        }

        .modal-close:hover {
            background: rgba(0, 0, 0, 0.05);
            color: var(--text-primary);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-primary);
        }

        .form-input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 2rem;
        }

        .btn-cancel {
            padding: 0.75rem 1.5rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            background: white;
            color: var(--text-secondary);
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-cancel:hover {
            background: var(--primary-bg);
            color: var(--text-primary);
        }

        .btn-submit {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            background: var(--accent-color);
            color: white;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-submit:hover {
            background: #4338ca;
        }
    </style>
</head>
<body class="flex h-screen">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <div class="sidebar-logo">
                <i class="fas fa-gamepad animate-float"></i>
                <h1>GameZone</h1>
            </div>
        </div>

        <nav class="space-y-1 px-4">
            <!-- Main Navigation -->
            <a href="/admin/dashboard" class="nav-link">
                <i class="fas fa-home"></i>
                <span>Dashboard</span>
            </a>

            <!-- Games Management -->
            <div class="nav-group">
                <div class="nav-group-header">
                    <div class="flex items-center">
                        <i class="fas fa-gamepad mr-3"></i>
                        <span>Games Management</span>
                    </div>
                    <i class="fas fa-chevron-down nav-group-toggle"></i>
                </div>
                <div class="nav-group-content">
                    <a href="/admin/games" class="nav-link">
                        <i class="fas fa-list"></i>
                        <span>All Games</span>
                    </a>
                    <a href="/admin/addgame" class="nav-link">
                        <i class="fas fa-plus-circle"></i>
                        <span>Add New Game</span>
                    </a>
                    <a href="/admin/categories" class="nav-link active">
                        <i class="fas fa-tags"></i>
                        <span>Categories</span>
                    </a>
                </div>
            </div>

            <!-- User Management -->
            <div class="nav-group">
                <div class="nav-group-header">
                    <div class="flex items-center">
                        <i class="fas fa-users mr-3"></i>
                        <span>User Management</span>
                    </div>
                    <i class="fas fa-chevron-down nav-group-toggle"></i>
                </div>
                <div class="nav-group-content">
                    <a href="/admin/users" class="nav-link">
                        <i class="fas fa-user-friends"></i>
                        <span>All Users</span>
                    </a>
                    <a href="/admin/users/admins" class="nav-link">
                        <i class="fas fa-user-shield"></i>
                        <span>Admin Users</span>
                    </a>
                </div>
            </div>

            <!-- Content Management -->
            <div class="nav-group">
                <div class="nav-group-header">
                    <div class="flex items-center">
                        <i class="fas fa-images mr-3"></i>
                        <span>Content</span>
                    </div>
                    <i class="fas fa-chevron-down nav-group-toggle"></i>
                </div>
                <div class="nav-group-content">
                    <a href="/admin/banner" class="nav-link">
                        <i class="fas fa-image"></i>
                        <span>Banner Management</span>
                    </a>
                </div>
            </div>

            <!-- Orders & Sales -->
            <a href="/admin/orders" class="nav-link">
                <i class="fas fa-shopping-cart"></i>
                <span>Orders</span>
            </a>

            <!-- Settings -->
            <div class="nav-group">
                <div class="nav-group-header">
                    <div class="flex items-center">
                        <i class="fas fa-cog mr-3"></i>
                        <span>Settings</span>
                    </div>
                    <i class="fas fa-chevron-down nav-group-toggle"></i>
                </div>
                <div class="nav-group-content">
                    <a href="/admin/settings/site" class="nav-link">
                        <i class="fas fa-globe"></i>
                        <span>Site Settings</span>
                    </a>
                    <a href="/admin/settings/profile" class="nav-link">
                        <i class="fas fa-user-cog"></i>
                        <span>Profile Settings</span>
                    </a>
                    <a href="/admin/settings/notifications" class="nav-link">
                        <i class="fas fa-bell"></i>
                        <span>Notifications</span>
                    </a>
                </div>
            </div>
        </nav>

        <div class="sidebar-footer">
            <div class="user-profile">
                <img src="/images/default-avatar.png" alt="Admin" class="user-avatar">
                <div class="user-info">
                    <div class="user-name">Admin</div>
                    <div class="user-role">Administrator</div>
                </div>
                <i class="fas fa-sign-out-alt text-gray-400 hover:text-red-500 cursor-pointer"></i>
            </div>
        </div>
    </div>

    <!-- Mobile Sidebar Toggle -->
    <button class="sidebar-toggle lg:hidden">
        <i class="fas fa-bars text-gray-600"></i>
    </button>

    <!-- Main Content -->
    <div class="flex-1 ml-72 p-8 main-content">
        <!-- Header -->
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold text-gray-800">Game Categories</h1>
                <p class="text-gray-600 mt-2">Manage your game categories</p>
            </div>
            <button id="addCategoryBtn" class="px-6 py-3 bg-indigo-500 text-white rounded-xl hover:bg-indigo-600 transition-all duration-300">
                <i class="fas fa-plus mr-2"></i>
                Add New Category
            </button>
        </div>

        <!-- Search and Filter -->
        <div class="search-container">
            <input type="text" id="searchInput" class="search-input" placeholder="Search categories...">
            <select id="statusFilter" class="search-input" style="max-width: 200px;">
                <option value="all">All Status</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
            </select>
        </div>

        
        <div class="card">
          <% if(category && category.length > 0){%>
        
            <% category.forEach(category=>{%>
              <div class="category-item">
                <div class="text-lg font-medium">
                     
                <%=category.categoryName%>

                </div> 
                <div class="category-actions">
                    <span class="status-badge status-active">
                        <i class="fas fa-circle text-xs"></i>
                        <%=category.status==='active'?'Active':'Inactive'%>
                    </span>
                    <button class="action-btn edit-btn" data-category-id="<%=category._id%>" data-category-name="<%=category.CategoryName%>">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="status-toggle" data-category-id="<%=category._id%>" data-status="<%=category.status%>">
                        <i class="fas fa-toggle-<%=category.status==='active'?'on':'off'%> text-<%=category.status==='active'?'green-500':'red-500'%>"></i> 
                    </button>
                </div>
              </div>
          <%});%>
          <%}else{%>
            <div class="category-item">
                <div class="text-lg font-medium">
                    No categories found
                </div>
                <!-- <div class="category-actions">
              
                    <button class="action-btn edit-btn" data-category-id="1" data-category-name="Action">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="status-toggle" data-category-id="1" data-status="active">
                        <i class="fas fa-toggle-on text-green-500"></i>
                    </button>
                </div> -->
            </div>
            
          <%}%>
          
        </div>
    

        <!-- Pagination -->
        <div class="pagination">
            <button class="page-item disabled">
                <i class="fas fa-chevron-left"></i>
            </button>
            <button class="page-item active">1</button>
            <button class="page-item">2</button>
            <button class="page-item">3</button>
            <button class="page-item">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>




    <!-- Add Category Modal -->
    <div id="addCategoryModal" class="modal">
        <div class="modal-content">
            <button class="modal-close" id="closeAddModal">
                <i class="fas fa-times"></i>
            </button>
            <div class="modal-header">
                <h2 class="modal-title">Add New Category</h2>
            </div>
            <form id="addCategoryForm" action="/admin/category" method="POST">
                <div class="form-group">
                    <label class="form-label" for="categoryName">Category Name</label>
                    <input type="text" id="categoryName" name="categoryName" class="form-input" placeholder="Enter category name" required>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-cancel" id="cancelAdd">Cancel</button>
                    <button type="submit" class="btn-submit">Add Category</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Category Modal -->
    <div id="editCategoryModal" class="modal">
        <div class="modal-content">
            <button class="modal-close" id="closeEditModal">
                <i class="fas fa-times"></i>
            </button>
            <div class="modal-header">
                <h2 class="modal-title">Edit Category</h2>
            </div>
            <form id="editCategoryForm">
                <input type="hidden" id="editCategoryId">
                <div class="form-group">
                    <label class="form-label" for="editCategoryName">Category Name</label>
                    <input type="text" id="editCategoryName" class="form-input" placeholder="Enter category name" required>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-cancel" id="cancelEdit">Cancel</button>
                    <button type="submit" class="btn-submit">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Sidebar Navigation Groups
        document.querySelectorAll('.nav-group-header').forEach(header => {
            header.addEventListener('click', () => {
                const content = header.nextElementSibling;
                const toggle = header.querySelector('.nav-group-toggle');
                
                content.classList.toggle('show');
                toggle.classList.toggle('rotated');
            });
        });

        // Mobile Sidebar Toggle
        const sidebarToggle = document.querySelector('.sidebar-toggle');
        const sidebar = document.querySelector('.sidebar');

        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('show');
        });

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', (e) => {
            if (window.innerWidth <= 768) {
                if (!sidebar.contains(e.target) && !sidebarToggle.contains(e.target)) {
                    sidebar.classList.remove('show');
                }
            }
        });

        document.querySelectorAll('.status-toggle').forEach(toggle => {
    toggle.addEventListener('click', async () => {
        const categoryId = toggle.dataset.categoryId;
        const currentStatus = toggle.dataset.status;
        const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
        toggle.disabled = true;

        try {
            const response = await fetch(`/admin/category/${categoryId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            });

            const data = await response.json();
            
            if (data.success) {
                const categoryItem = toggle.closest('.category-item');
                const statusBadge = categoryItem.querySelector('.status-badge');
                const statusIcon = toggle.querySelector('i');

                // Update status badge
                statusBadge.className = `status-badge status-${newStatus}`;
                statusBadge.innerHTML = `
                    <i class="fas fa-circle text-xs"></i>
                    ${newStatus === 'active' ? 'Active' : 'Inactive'}
                `;

                // Update toggle button icon and color
                statusIcon.className = `fas fa-toggle-${newStatus === 'active' ? 'on' : 'off'}`;
                if (newStatus === 'active') {
                    statusIcon.classList.add('text-green-500');
                    statusIcon.classList.remove('text-red-500');
                } else {
                    statusIcon.classList.add('text-red-500');
                    statusIcon.classList.remove('text-green-500');
                }
                
                // Update data-status attribute
                toggle.dataset.status = newStatus;
            }
        } catch (error) {
            console.error('Error updating category status:', error);
            alert('Error updating category status. Please try again.');
        } finally {
            toggle.disabled = false;
        }
    });
});



        // Add Category
        addCategoryBtn.addEventListener('click', () => {
            addCategoryModal.classList.add('show');
        });

        // Edit Category
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const categoryId = btn.dataset.categoryId;
                const categoryName = btn.dataset.categoryName;
                
                document.getElementById('editCategoryId').value = categoryId;
                document.getElementById('editCategoryName').value = categoryName;
                editCategoryModal.classList.add('show');
            });
        });

        // Close Modals
        const closeModals = () => {
            addCategoryModal.classList.remove('show');
            editCategoryModal.classList.remove('show');
        };

        closeAddModal.addEventListener('click', closeModals);
        closeEditModal.addEventListener('click', closeModals);
        cancelAdd.addEventListener('click', closeModals);
        cancelEdit.addEventListener('click', closeModals);

        // Close modals when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === addCategoryModal || e.target === editCategoryModal) {
                closeModals();
            }
        });

       

        editCategoryForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const categoryId = document.getElementById('editCategoryId').value;
            const categoryName = document.getElementById('editCategoryName').value;
            
            try {
                // Here you would typically make an API call to update the category
                // For now, we'll just log it
                console.log('Updating category:', categoryId, categoryName);
                
                // Update the category in the list
                const categoryItem = document.querySelector(`.edit-btn[data-category-id="${categoryId}"]`).closest('.category-item');
                categoryItem.querySelector('.text-lg').textContent = categoryName;
                
                // Update the data attribute
                categoryItem.querySelector('.edit-btn').dataset.categoryName = categoryName;
                
                // Reset form and close modal
                editCategoryForm.reset();
                closeModals();
                
                // Show success message
                alert('Category updated successfully!');
            } catch (error) {
                console.error('Error updating category:', error);
                alert('Error updating category. Please try again.');
            }
        });

        // Delete Category
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const categoryId = btn.dataset.categoryId;
                
                if (confirm('Are you sure you want to delete this category?')) {
                    try {
                        // Here you would typically make an API call to delete the category
                        // For now, we'll just log it
                        console.log('Deleting category:', categoryId);
                        
                        // Remove the category from the list
                        btn.closest('.category-item').remove();
                        
                        // Show success message
                        alert('Category deleted successfully!');
                    } catch (error) {
                        console.error('Error deleting category:', error);
                        alert('Error deleting category. Please try again.');
                    }
                }
            });
        });

        // Search and Filter Functionality
        const searchInput = document.getElementById('searchInput');
        const statusFilter = document.getElementById('statusFilter');
        const categoryItems = document.querySelectorAll('.category-item');

        function filterCategories() {
            const searchTerm = searchInput.value.toLowerCase();
            const statusValue = statusFilter.value;

            categoryItems.forEach(item => {
                const categoryName = item.querySelector('.text-lg').textContent.toLowerCase();
                const status = item.querySelector('.status-badge').textContent.trim().toLowerCase();
                
                const matchesSearch = categoryName.includes(searchTerm);
                const matchesStatus = statusValue === 'all' || status.includes(statusValue);
                
                item.style.display = matchesSearch && matchesStatus ? 'flex' : 'none';
            });
        }

        searchInput.addEventListener('input', filterCategories);
        statusFilter.addEventListener('change', filterCategories);

        // Status Toggle Functionality
        document.querySelectorAll('.status-toggle').forEach(toggle => {
    toggle.addEventListener('click', async () => {
        const categoryId = toggle.dataset.categoryId;
        const currentStatus = toggle.dataset.status;
        const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
        toggle.disabled = true;

        try {
            const response = await fetch(`/admin/category/${categoryId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            });

            const data = await response.json();
            
            if (data.success) {
                const categoryItem = toggle.closest('.category-item');
                const statusBadge = categoryItem.querySelector('.status-badge');
                const statusIcon = toggle.querySelector('i');

                // Update status badge
                statusBadge.className = `status-badge ${newStatus === 'active' ? 'status-active' : 'status-inactive'}`;
                statusBadge.innerHTML = `
                    <i class="fas fa-circle text-xs"></i>
                    ${newStatus === 'active' ? 'Active' : 'Inactive'}
                `;

                // Update toggle button with proper color classes
                statusIcon.className = newStatus === 'active' 
                    ? 'fas fa-toggle-on text-green-500' 
                    : 'fas fa-toggle-off text-red-500';
                
                // Update data-status attribute
                toggle.dataset.status = newStatus;
            }
        } catch (error) {
            console.error('Error updating category status:', error);
            alert('Error updating category status. Please try again.');
        } finally {
            toggle.disabled = false;
        }
    });
});


        // ... existing code ...

document.querySelectorAll('.status-toggle').forEach(toggle => {
    toggle.addEventListener('click', async () => {
        const categoryId = toggle.dataset.categoryId;
        const currentStatus = toggle.dataset.status;
        const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
        toggle.disabled = true;

        try {
            const response = await fetch(`/admin/category/${categoryId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            });

            const data = await response.json();
            
            if (data.success) {
                const categoryItem = toggle.closest('.category-item');
                const statusBadge = categoryItem.querySelector('.status-badge');
                const statusIcon = toggle.querySelector('i');

                // Update status badge class and content
                statusBadge.className = `status-badge status-${newStatus}`;
                statusBadge.innerHTML = `
                    <i class="fas fa-circle text-xs"></i>
                    ${newStatus === 'active' ? 'Active' : 'Inactive'}
                `;

                // Update toggle button icon and color
                statusIcon.className = `fas fa-toggle-${newStatus === 'active' ? 'on' : 'off'} ${newStatus === 'active' ? 'text-green-500' : 'text-red-500'}`;
                
                // Update data-status attribute
                toggle.dataset.status = newStatus;
            }
        } catch (error) {
            console.error('Error updating category status:', error);
            alert('Error updating category status. Please try again.');
        } finally {
            toggle.disabled = false;
        }
    });
});

// ... existing code ...

        // Pagination Functionality
        const pageItems = document.querySelectorAll('.page-item');
        let currentPage = 1;

        pageItems.forEach(item => {
            item.addEventListener('click', () => {
                if (item.classList.contains('disabled')) return;
                
                // Remove active class from all items
                pageItems.forEach(pageItem => pageItem.classList.remove('active'));
                
                // Add active class to clicked item
                item.classList.add('active');
                
                // Update current page
                if (!item.querySelector('i')) {
                    currentPage = parseInt(item.textContent);
                } else if (item.querySelector('.fa-chevron-left')) {
                    currentPage = Math.max(1, currentPage - 1);
                } else if (item.querySelector('.fa-chevron-right')) {
                    currentPage = Math.min(3, currentPage + 1);
                }
                
                // Here you would typically make an API call to fetch the next page
                // For now, we'll just log it
                console.log('Current page:', currentPage);
            });
        });
    </script>
</body>
</html> 