<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Admin Chat Panel</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>
<body class="bg-gray-50 h-screen overflow-hidden font-sans">
  <%- include('partials/sidebar') %>

  <div class="flex h-screen lg:ml-64 bg-white shadow-2xl rounded-xl overflow-hidden">

    <!-- Users List -->
    <aside class="w-1/3 hidden sm:block border-r bg-white">
      <div class="px-6 py-4 border-b bg-gradient-to-r from-green-400 to-blue-500 text-white">
        <h2 class="text-xl font-bold">üí¨ Chat Support</h2>
      </div>
      <div class="overflow-y-auto h-full">
        <ul class="divide-y divide-gray-100" id="userList"></ul>
      </div>
    </aside>

    <!-- Chat Window -->
    <main class="flex-1 flex flex-col relative bg-gray-50">
      <!-- Chat Header -->
      <div id="chatHeader" class="flex items-center gap-4 px-6 py-4 border-b bg-white shadow-sm">
        <div class="ml-auto">
          <i class="fas fa-ellipsis-v text-gray-500 hover:text-gray-700 transition"></i>
        </div>
      </div>

      <!-- Chat Messages -->
      <!-- <div id="chatMessages" class="flex-1 overflow-y-auto px-6 py-4 space-y-4 bg-gradient-to-br from-gray-50 to-gray-100 scroll-smooth"></div> -->
      <div id="chatMessages" class="flex-1 min-h-0 overflow-y-auto px-6 py-4 space-y-4 bg-gradient-to-br from-gray-50 to-gray-100 scroll-smooth"></div>

      <!-- Input Box -->
      <form onsubmit="sendAdminMessage(event)" class="flex items-center gap-3 p-4 border-t bg-white shadow-inner">
        <input
        id="adminMessageInput"
        type="text",
        autocomplete="off"
        placeholder="Type your message..."
        class="flex-1 px-5 py-2 text-sm rounded-full border border-gray-300 bg-white shadow-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition"
      />
      
        <button type="submit" class="bg-green-500 hover:bg-green-600 transition text-white font-semibold px-5 py-2 rounded-full shadow-md">
          Send
        </button>
      </form>
    </main>
  </div>


<script src="/socket.io/socket.io.js"></script>
<script>
  console.log("‚úÖ Script loaded");

  // Global Variables
  const socket = io();
  let currentUser = null;
  let chats = {};
  let userStatus = {};
  let typingUsers = {};

  // Disable input initially
  document.getElementById('adminMessageInput').disabled = true;

  // Join admin room
  socket.emit('joinAdmin');

  // Listen for new messages
  socket.on('newMessage', (msg) => {
    if (!msg.userId) return;
    if (!chats[msg.userId]) chats[msg.userId] = [];
    chats[msg.userId].push(msg);
    updateUserList();
    if (msg.userId === currentUser) appendMessage(msg);
  });

  // Listen for user status updates
  socket.on('userStatus', ({ userId, status }) => {
    if (!userId) return;
    userStatus[userId] = status;
    updateUserList();
    if (userId === currentUser) updateChatHeader(userId);
  });

  // Listen for typing status
  socket.on('userTyping', ({ userId }) => {
    if (!userId) return;
    typingUsers[userId] = true;
    if (userId === currentUser) updateChatHeader(userId);
    setTimeout(() => {
      typingUsers[userId] = false;
      if (userId === currentUser) updateChatHeader(userId);
    }, 2000);
  });
  fetch('/admin/chats')
  .then(res => res.json())
  .then(messages => {
    if (!Array.isArray(messages)) {
      console.error('Chat history is not an array:', messages);
      return;
    }
    messages.forEach(msg => {
      if (!chats[msg.userId]) chats[msg.userId] = [];
      chats[msg.userId].push(msg);
    });
    updateUserList();
  })
  .catch(err => {
    console.error('Failed to load chat history:', err);
    updateUserList();
  });
  // Update the user list in the sidebar
  function updateUserList() {
    const userList = document.getElementById('userList');
    userList.innerHTML = '';

    Object.keys(chats).forEach(userId => {
      if (!chats[userId].length) return;
      const lastMsg = chats[userId][chats[userId].length - 1];
      const userName = lastMsg.userName || userId || "Guest";
      const isTyping = typingUsers[userId];
      const statusDot = userStatus[userId] === 'online' ? 'bg-green-500' : 'bg-gray-400';

      const li = document.createElement('li');
      li.className = "px-4 py-3 flex items-center gap-3 hover:bg-gray-100 cursor-pointer";
      li.onclick = () => selectUser(userId);
      li.innerHTML = `
        <div class="relative">
          <img src="https://i.pravatar.cc/40?u=${userId}" class="w-10 h-10 rounded-full" />
          <span class="absolute bottom-0 right-0 w-3 h-3 ${statusDot} border-2 border-white rounded-full"></span>
        </div>
        <div>
          <p class="font-semibold text-gray-800">${userName} ${isTyping ? '<span class="text-xs text-pink-500 ml-1">Typing...</span>' : ''}</p>
          <span class="text-sm text-gray-500">${lastMsg.message}</span>
        </div>
      `;
      userList.appendChild(li);
      
    });
  }

  // Update the chat header
  function updateChatHeader(userId) {
    const header = document.getElementById('chatHeader');
    if (!header) return;
    const lastMsg = chats[userId] && chats[userId].length ? chats[userId][chats[userId].length - 1] : {};
    const userName = lastMsg.userName || userId || "Guest";
    const isTyping = typingUsers[userId];
    const statusDot = userStatus[userId] === 'online' ? 'bg-green-500' : 'bg-gray-400';

    header.innerHTML = `
      <div class="relative">
        <img src="https://i.pravatar.cc/40?u=${userId}" class="w-10 h-10 rounded-full" />
        <span class="absolute bottom-0 right-0 w-3 h-3 ${statusDot} border-2 border-white rounded-full"></span>
      </div>
      <div>
        <h3 class="text-gray-800 font-semibold">${userName}</h3>
        <p class="text-xs text-gray-500">${userStatus[userId] === 'online' ? 'Online' : 'Offline'}${isTyping ? ' ‚Ä¢ Typing...' : ''}</p>
      </div>
      <div class="ml-auto">
        <i class="fas fa-ellipsis-v text-gray-500 cursor-pointer"></i>
      </div>
    `;
  }

  // Select user from list
  function selectUser(userId) {
    if (!userId) return;
    currentUser = userId;
    updateChatHeader(userId);
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.innerHTML = '';
    chats[userId].forEach(appendMessage);
    document.getElementById('adminMessageInput').disabled = false;
    setTimeout(() => {
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }, 0);
  }

  // Append a message to the chat window
  function appendMessage(msg) {
  if (!msg || !msg.message) return;
  const chat = document.getElementById('chatMessages');
  if (!chat) return;
  const html = msg.sender === 'admin'
    ? `<div class="flex justify-end">
        <div class="bg-green-500 text-white px-4 py-2 rounded-2xl shadow-md text-sm max-w-sm">
          ${msg.message}
          <div class="text-xs text-white/70 mt-1 text-right">${new Date(msg.timestamp).toLocaleTimeString()}</div>
        </div>
      </div>`
    : `<div class="flex items-start gap-3">
        <img src="https://i.pravatar.cc/30?u=${msg.userId}" class="w-8 h-8 rounded-full" />
        <div class="bg-white px-4 py-2 rounded-2xl shadow text-sm text-gray-800 max-w-sm">
          ${msg.message}
          <div class="text-xs text-gray-400 mt-1">${new Date(msg.timestamp).toLocaleTimeString()}</div>
        </div>
      </div>`;

  chat.insertAdjacentHTML('beforeend', html);

  // Ensure scroll happens after DOM update
  setTimeout(() => {
    chat.scrollTop = chat.scrollHeight;
  }, 0);
}

  // Admin sends a message
  function sendAdminMessage(e) {
  e.preventDefault();
  const input = document.getElementById('adminMessageInput');
  const message = input?.value?.trim();

  if (!currentUser) {
    alert('‚ö†Ô∏è Please select a user from the chat list before sending a message.');
    return;
  }
  if (!message) return;

  const msg = {
    userId: currentUser,
    message,
    sender: 'admin',
    timestamp: new Date()
  };

  socket.emit('adminMessage', msg);

  // Save admin message to backend
  fetch('/admin/chats', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(msg)
  });

  if (!chats[currentUser]) chats[currentUser] = [];
  chats[currentUser].push(msg);
  appendMessage(msg);
  input.value = '';
}

  // Initial user list update (in case there are existing chats)
  updateUserList();
</script>

</body>

</html>




