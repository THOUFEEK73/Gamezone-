<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Admin Chat Panel</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    /* Chat Bubbles */
    .message-bubble {
      max-width: 70%;
      padding: 0.75rem 1rem;
      border-radius: 1.25rem;
      position: relative;
      font-size: 0.875rem;
      word-wrap: break-word;
    }
    .message-bubble::after {
      content: '';
      position: absolute;
      bottom: 0;
      width: 0;
      height: 0;
    }
    
    .message-incoming {
      background-color: #ffffff;
      color: #333;
      border: 1px solid #e2e8f0;
      border-bottom-left-radius: 0;
    }
    .message-incoming::after {
      left: -8px;
      border-left: 8px solid transparent;
      border-top: 8px solid white;
    }
    
    .message-outgoing {
      background-color: #34d399;
      color: white;
      align-self: flex-end;
      border-bottom-right-radius: 0;
    }
    .message-outgoing::after {
      right: -8px;
      border-right: 8px solid transparent;
      border-top: 8px solid #34d399;
    }
    
    /* Typing Animation */
    .typing-indicator {
      display: inline-block;
      width: 1rem;
      height: 1rem;
      background: #d1d5db;
      border-radius: 50%;
      animation: typing 1.2s infinite ease-in-out;
    }
    .typing-indicator:nth-child(2) {
      animation-delay: 0.2s;
    }
    .typing-indicator:nth-child(3) {
      animation-delay: 0.4s;
    }
    @keyframes typing {
      0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
      40% { transform: scale(1); opacity: 1; }
    }
    </style>
    
</head>
<body class="bg-gray-50 h-screen overflow-hidden font-sans">
  <%- include('partials/sidebar') %>

  <div class="flex h-screen lg:ml-64 bg-white shadow-2xl rounded-xl overflow-hidden">

    <!-- Users List -->
    <aside class="w-full sm:w-1/3 border-r bg-white shadow-md rounded-none sm:rounded-l-xl flex flex-col">
      <!-- Header -->
      <div class="px-6 py-4 bg-[#25D366] text-white shadow-md flex items-center justify-between">
        <h2 class="text-xl font-semibold tracking-wide flex items-center gap-2">
          <i class="fas fa-comments text-white text-lg"></i> Chat Support
        </h2>
      </div>
    
      <!-- Users List -->
      <div class="flex-1 overflow-y-auto">
        <ul id="userList" class="divide-y divide-gray-100"></ul>
      </div>
    </aside>
    

    <!-- Chat Window -->
    <main class="flex-1 flex flex-col relative bg-gray-50">
      <div id="noChatSelected" class="flex-1 flex items-center justify-center text-center p-10 bg-gradient-to-br from-[#E0F7FA] via-[#F1F8E9] to-white">
        <div class="text-[#075E54]">
          <i class="fas fa-comment-dots text-6xl mb-4 animate-pulse drop-shadow-md"></i>
          <h2 class="text-2xl font-bold">Start a Conversation</h2>
          <p class="text-gray-700 mt-2 text-sm">Choose a user on the left to view or reply to their messages.</p>
        </div>
      </div>
      
    
      <!-- Chat Header (hidden initially) -->
      <div id="chatHeader" class="hidden flex items-center gap-4 px-6 py-4 border-b bg-white shadow-sm"></div>
    
      <!-- Chat Messages (hidden initially) -->
      <div id="chatMessages" class="hidden flex-1 min-h-0 overflow-y-auto px-6 py-4 space-y-4 bg-gradient-to-br from-gray-50 to-gray-100 scroll-smooth"></div>
    
      <!-- Input Box (hidden initially) -->
      <form onsubmit="sendAdminMessage(event)" id="chatInputForm"
      class="hidden flex items-center gap-3 p-4 border-t bg-white shadow-md backdrop-blur-sm">
    
      <!-- Input -->
      <div class="flex-1 relative">
        <input id="adminMessageInput"
          type="text"
          autocomplete="off"
          placeholder="Type your message..."
          class="w-full px-5 py-3 pl-10 text-sm text-gray-800 rounded-full border border-gray-300 bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 transition-all"
        />
        <i class="fas fa-comment text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2 text-sm"></i>
      </div>
    
      <!-- Send Button -->
      <button type="submit"
        class="flex items-center justify-center gap-2 bg-green-500 hover:bg-green-600 text-white font-semibold px-5 py-2.5 rounded-full shadow-lg transition-all duration-200 active:scale-95">
        <i class="fas fa-paper-plane"></i>
        <span class="hidden sm:inline">Send</span>
      </button>
    </form>
    
    </main>
    
  </div>


<script src="/socket.io/socket.io.js"></script>
<script>
  console.log("✅ Script loaded");

  // Global Variables
  const socket = io();
  let currentUser = null;
  let chats = {};
  let userStatus = {};
  let typingUsers = {};

  // Disable input initially
  document.getElementById('adminMessageInput').disabled = true;

  // Join admin room
  socket.emit('joinAdmin');

  // Listen for new messages
  socket.on('newMessage', (msg) => {
    if (!msg.userId) return;
    if (!chats[msg.userId]) chats[msg.userId] = [];
    chats[msg.userId].push(msg);
    updateUserList();
    if (msg.userId === currentUser) appendMessage(msg);
  });

  // Listen for user status updates
  socket.on('userStatus', ({ userId, status }) => {
    if (!userId) return;
    userStatus[userId] = status;
    updateUserList();
    if (userId === currentUser) updateChatHeader(userId);
  });

  // Listen for typing status
  socket.on('userTyping', ({ userId }) => {
    if (!userId) return;
    typingUsers[userId] = true;
    if (userId === currentUser) updateChatHeader(userId);
    setTimeout(() => {
      typingUsers[userId] = false;
      if (userId === currentUser) updateChatHeader(userId);
    }, 2000);
  });
  fetch('/admin/chats')
  .then(res => res.json())
  .then(messages => {
    if (!Array.isArray(messages)) {
      console.error('Chat history is not an array:', messages);
      return;
    }
    messages.forEach(msg => {
      if (!chats[msg.userId]) chats[msg.userId] = [];
      chats[msg.userId].push(msg);
    });
    updateUserList();
  })
  .catch(err => {
    console.error('Failed to load chat history:', err);
    updateUserList();
  });
  // Update the user list in the sidebar
  function updateUserList() {
    const userList = document.getElementById('userList');
    userList.innerHTML = '';

    Object.keys(chats).forEach(userId => {
      if (!chats[userId].length) return;
      const lastMsg = chats[userId][chats[userId].length - 1];
      const userName = lastMsg.userName || userId || "Guest";
      const isTyping = typingUsers[userId];
      const statusDot = userStatus[userId] === 'online' ? 'bg-green-500' : 'bg-gray-400';

      const li = document.createElement('li');
      li.className = "px-4 py-3 flex items-center gap-3 hover:bg-gray-100 cursor-pointer";
      li.onclick = () => selectUser(userId);
      li.innerHTML = `
        <div class="relative">
          <img src="https://i.pravatar.cc/40?u=${userId}" class="w-10 h-10 rounded-full" />
          <span class="absolute bottom-0 right-0 w-3 h-3 ${statusDot} border-2 border-white rounded-full"></span>
        </div>
        <div>
        <p class="text-xs text-gray-500">
  ${userStatus[userId] === 'online' ? 'Online' : 'Offline'}
  ${isTyping ? `
    <span class="ml-2 flex items-center gap-1">
      <span class="typing-indicator"></span>
      <span class="typing-indicator"></span>
      <span class="typing-indicator"></span>
    </span>` : ''}
</p>

          <span class="text-sm text-gray-500">${lastMsg.message}</span>
        </div>
      `;
      userList.appendChild(li);
      
    });
  }

  // Update the chat header
  function updateChatHeader(userId) {
    const header = document.getElementById('chatHeader');
    if (!header) return;
    const lastMsg = chats[userId] && chats[userId].length ? chats[userId][chats[userId].length - 1] : {};
    const userName = lastMsg.userName || userId || "Guest";
    const isTyping = typingUsers[userId];
    const statusDot = userStatus[userId] === 'online' ? 'bg-green-500' : 'bg-gray-400';

    header.innerHTML = `
      <div class="relative">
        <img src="https://i.pravatar.cc/40?u=${userId}" class="w-10 h-10 rounded-full" />
        <span class="absolute bottom-0 right-0 w-3 h-3 ${statusDot} border-2 border-white rounded-full"></span>
      </div>
      <div>
        <h3 class="text-gray-800 font-semibold">${userName}</h3>
        <p class="text-xs text-gray-500">${userStatus[userId] === 'online' ? 'Online' : 'Offline'}${isTyping ? ' • Typing...' : ''}</p>
      </div>
      <div class="ml-auto">
        <i class="fas fa-ellipsis-v text-gray-500 cursor-pointer"></i>
      </div>
    `;
  }

  // Select user from list
  function selectUser(userId) {
  if (!userId) return;
  currentUser = userId;

  // Hide placeholder
  document.getElementById('noChatSelected').classList.add('hidden');

  // Show actual chat sections
  document.getElementById('chatHeader').classList.remove('hidden');
  document.getElementById('chatMessages').classList.remove('hidden');
  document.getElementById('chatInputForm').classList.remove('hidden');

  updateChatHeader(userId);

  const chatMessages = document.getElementById('chatMessages');
  chatMessages.innerHTML = '';
  chats[userId].forEach(appendMessage);
  document.getElementById('adminMessageInput').disabled = false;

  setTimeout(() => {
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }, 0);
}


  // Append a message to the chat window
  function appendMessage(msg) {
  if (!msg || !msg.message) return;
  const chat = document.getElementById('chatMessages');
  if (!chat) return;
  const html = msg.sender === 'admin'
  ? `<div class="flex justify-end px-2">
      <div class="message-bubble message-outgoing shadow">
        ${msg.message}
        <div class="text-xs text-white/70 mt-1 text-right">${new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
      </div>
    </div>`
  : `<div class="flex items-start gap-3 px-2">
      <img src="https://i.pravatar.cc/30?u=${msg.userId}" class="w-8 h-8 rounded-full" />
      <div class="message-bubble message-incoming shadow">
        ${msg.message}
        <div class="text-xs text-gray-400 mt-1">${new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
      </div>
    </div>`;


  chat.insertAdjacentHTML('beforeend', html);

  // Ensure scroll happens after DOM update
  setTimeout(() => {
    chat.scrollTop = chat.scrollHeight;
  }, 0);
}

  // Admin sends a message
  function sendAdminMessage(e) {
  e.preventDefault();
  const input = document.getElementById('adminMessageInput');
  const message = input?.value?.trim();

  if (!currentUser) {
    alert('⚠️ Please select a user from the chat list before sending a message.');
    return;
  }
  if (!message) return;

  const msg = {
    userId: currentUser,
    message,
    sender: 'admin',
    timestamp: new Date()
  };

  socket.emit('adminMessage', msg);

  // Save admin message to backend
  fetch('/admin/chats', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(msg)
  });

  if (!chats[currentUser]) chats[currentUser] = [];
  chats[currentUser].push(msg);
  appendMessage(msg);
  input.value = '';
}

  // Initial user list update (in case there are existing chats)
  updateUserList();
</script>

</body>

</html>




