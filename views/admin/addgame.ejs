<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GameZone Admin - Add Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <style>
        body {
            background-color: #f9fafb;
            color: #222;
            font-family: 'Inter', sans-serif;
        }
        .card {
            background-color: #fff;
            border: 1px solid #e5e7eb;
            border-radius: 1rem;
            transition: box-shadow 0.2s;
        }
        .card:hover {
            box-shadow: 0 10px 15px -3px rgba(129, 140, 248, 0.08);
        }
        .form-input {
            background-color: #f3f4f6;
            border: 1px solid #d1d5db;
            color: #222;
            border-radius: 0.75rem;
            padding: 0.75rem 1rem;
            transition: border-color 0.2s, box-shadow 0.2s;
            width: 100%;
        }
        .form-input:focus {
            outline: none;
            border-color: #a78bfa;
            box-shadow: 0 0 0 2px rgba(129, 140, 248, 0.15);
        }
        .form-label {
            color: #374151;
            font-size: 0.95rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }
        .helper-text {
            color: #6b7280;
            font-size: 0.8rem;
            margin-top: 0.25rem;
        }
        .file-upload {
            border: 2px dashed #d1d5db;
            border-radius: 1rem;
            padding: 2rem;
            text-align: center;
            background: #f3f4f6;
            cursor: pointer;
            transition: border-color 0.3s, background 0.3s;
        }
        .file-upload:hover {
            border-color: #a78bfa;
            background: #ede9fe;
        }
        .btn-primary {
            background: #a78bfa;
            color: white;
            border: none;
            border-radius: 0.75rem;
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            transition: background 0.2s, transform 0.2s;
        }
        .btn-primary:hover {
            background: #7c3aed;
            transform: translateY(-1px);
        }
        .btn-secondary {
            background: #f3f4f6;
            color: #222;
            border: 1px solid #d1d5db;
            border-radius: 0.75rem;
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            transition: background 0.2s, transform 0.2s;
        }
        .btn-secondary:hover {
            background: #e5e7eb;
            transform: translateY(-1px);
        }
        select.form-input {
            background-color: #f3f4f6;
            color: #222;
            border: 1px solid #d1d5db;
        }
        select.form-input option {
            background-color: #fff;
            color: #222;
        }
        .preview-container {
            width: 100%;
            margin-top: 1rem;
            background: #f3f4f6;
            padding: 1rem;
            border-radius: 0.5rem;
        }
        .preview-image {
            width: auto;
            max-width: 100%;
            height: auto;
            display: block;
            margin: 0 auto;
            border-radius: 0.5rem;
            box-shadow: 0 2px 8px 0 rgba(129, 140, 248, 0.08);
        }
        #screenshotsContainer {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        .screenshot-preview {
            position: relative;
            background: #f3f4f6;
            padding: 1rem;
            border-radius: 0.5rem;
        }
        .screenshot-preview img {
            width: auto;
            max-width: 100%;
            height: auto;
            display: block;
            margin: 0 auto;
            border-radius: 0.5rem;
        }
        .screenshot-remove-btn {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 2rem;
            height: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 10;
            transition: background 0.2s;
        }
        .screenshot-remove-btn:hover {
            background: #dc2626;
        }
        #addScreenshotBtn {
            width: 100%;
            height: 200px;
            border: 2px dashed #d1d5db;
            border-radius: 0.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            background: #f3f4f6;
            transition: border-color 0.3s, background 0.3s;
        }
        #addScreenshotBtn:hover {
            border-color: #a78bfa;
            background: #ede9fe;
        }
        .form-input.border-red-500 {
            border-color: #ef4444;
        }
        .form-input.border-red-500:focus {
            border-color: #ef4444;
            box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.12);
        }
        .text-red-500 {
            color: #ef4444;
        }
        .file-upload.border-red-500 {
            border-color: #ef4444;
        }
        /* Cropper.js styles */
        .cropper-container,
        .cropper-wrap-box,
        .cropper-bg {
            background-color: #f3f4f6 !important;
        }
        .cropper-modal {
            background-color: rgba(0, 0, 0, 0.8) !important;
        }
        .cropper-line,
        .cropper-point {
            background-color: #a78bfa !important;
        }
        .cropper-view-box {
            outline: 1px solid #a78bfa !important;
        }
        .cropper-center {
            background-color: #a78bfa !important;
        }
        .crop-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 1000;
        }
        .crop-modal-content {
            position: relative;
            width: 90%;
            max-width: 800px;
            margin: 2rem auto;
            background-color: #fff;
            color: #222;
            padding: 1rem;
            border-radius: 0.5rem;
        }
        .crop-container {
            max-height: 70vh;
            margin: 1rem 0;
        }
        .crop-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 1rem;
        }
        .crop-image {
            max-width: 100%;
            max-height: 70vh;
        }
        /* Sidebar styles */
        .sidebar {
            background-color: #fff;
            border-right: 1px solid #e5e7eb;
            width: 18rem;
            position: fixed;
            left: 0;
            top: 0;
            bottom: 0;
            overflow-y: auto;
            transition: transform 0.3s ease;
            z-index: 50;
        }
        @media (max-width: 1024px) {
            .sidebar {
                transform: translateX(-100%);
            }
            .sidebar.show {
                transform: translateX(0);
            }
            .main-content {
                margin-left: 0 !important;
            }
        }
        .sidebar-toggle {
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 60;
            padding: 0.5rem;
            border-radius: 0.5rem;
            background-color: #fff;
            border: 1px solid #e5e7eb;
        }
        .nav-group-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }
        .nav-group-content.show {
            max-height: 500px;
        }
        .nav-group-toggle {
            transition: transform 0.3s ease;
        }
        .nav-group-toggle.rotated {
            transform: rotate(180deg);
        }
        /* Header section styles */
        .text-gray-800 {
            color: #222;
        }
        .text-gray-600 {
            color: #6b7280;
        }
        .bg-white {
            background-color: #fff;
        }
        .text-gray-700 {
            color: #374151;
        }
        .shadow-lg {
            box-shadow: 0 4px 6px -1px rgba(129, 140, 248, 0.08);
        }
        /* Status badges */
        .status-badge.success { background: rgba(34, 197, 94, 0.12); color: #22c55e; }
        .status-badge.warning { background: rgba(245, 158, 11, 0.12); color: #f59e0b; }
        .status-badge.error { background: rgba(239, 68, 68, 0.12); color: #ef4444; }
        .status-badge.info { background: rgba(59, 130, 246, 0.12); color: #3b82f6; }
    </style>
</head>
<body class="flex h-screen bg-gray-50 text-gray-900">
    <%- include('partials/sidebar') %>

    <button class="sidebar-toggle lg:hidden">
        <i class="fas fa-bars text-gray-600"></i>
    </button>
    <div class="flex-1 ml-0 lg:ml-72 p-8 main-content bg-gray-50">
        <!-- Header -->
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Add New Game</h1>
                <p class="text-gray-600 mt-2">Fill in the details below to add a new game to the store.</p>
            </div>
        </div>
        <!-- Add Game Form -->
        <form class="space-y-6" method="POST" action="/admin/addgame" enctype="multipart/form-data">
            <!-- Basic Info Section -->
            <div class="card p-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">Basic Information</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="form-label">Game Title</label>
                        <input type="text" name="title" class="form-input" value="<%=data.title%>">
                        <p class="helper-text">Enter the official title of the game</p>
                        <% if (typeof errors !== 'undefined' && errors.title) { %>
                            <div class="error-message text-red-500 text-sm font-bold mt-1">
                              <%= errors.title %>
                            </div>
                        <% } %>
                    </div>
                    <div>
                        <label class="form-label">Price</label>
                        <div class="relative">
                            <span class="absolute left-3 top-2.5 text-gray-400">&#8377;</span>
                            <input type="number" name="price" step="0.01" class="form-input pl-10" value="<%=data.price%>">
                            <p class="helper-text">Set the retail price for the game</p>
                        </div>
                        <% if (typeof errors !== 'undefined' && errors.price) { %>
                            <div class="error-message text-red-500 text-sm font-bold mt-1">
                              <%= errors.price %>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
            <!-- Media Section -->
            <div class="card p-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">Media</h2>
                <!-- Cover Image Section -->
                <div class="mb-6">
                    <label class="form-label block mb-2">Game Cover Image</label>
                    <p class="helper-text mb-3">Upload a high-quality cover image in 16:9 aspect ratio</p>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <label for="coverImageUpload" class="file-upload block h-full">
                            <input type="file" id="coverImageUpload" name="coverImage" accept="image/*" class="hidden" >
                            <div class="flex flex-col items-center justify-center h-full">
                                <i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-3"></i>
                                <p class="text-sm text-gray-600">Click to upload or drag and drop</p>
                                <p class="text-xs text-gray-500 mt-1">PNG, JPG up to 10MB</p>
                            </div>
                        </label>
                        <div id="coverPreviewContainer" class="preview-container hidden">
                            <div class="relative">
                                <img id="coverPreviewImage" src="" alt="Cover Preview" class="preview-image">
                                <button type="button" onclick="clearCoverPreview()"
                                        class="absolute top-2 right-2 p-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- <% if (typeof errors !== 'undefined' && errors.coverImage) { %>
                    <span class="error" style="color:red"><%= errors.coverImage %></span>
                  <% } %> -->
                <!-- Screenshots Section -->
                <div class="mb-6">
                    <label class="form-label">Screenshots</label>
                    <p class="helper-text mb-3">Upload up to 4 screenshots in 16:9 aspect ratio</p>
                    <div class="file-upload" id="screenshotDropzone">
                        <input type="file" id="screenshotUpload" name="screenshots" accept="image/*" class="hidden" multiple>
                        <div class="flex flex-col items-center">
                            <i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4"></i>
                            <p class="text-gray-400">Drag and drop screenshots here or click to browse</p>
                            <p class="text-sm text-gray-500 mt-2">Supported formats: JPG, PNG, WebP</p>
                        </div>
                    </div>
                    <div id="screenshotsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div id="addScreenshotBtn" onclick="document.getElementById('screenshotUpload').click()"
                             class="cursor-pointer flex flex-col items-center justify-center h-48 border-2 border-dashed border-gray-400 rounded-lg hover:border-purple-400 transition-colors">
                            <i class="fas fa-plus text-2xl text-gray-400 mb-2"></i>
                            <span class="text-gray-400">Add Screenshot</span>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Details Section -->
            <div class="card p-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">Game Details</h2>
                <div class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="relative w-full">
                            <div>
                                <label class="form-label">Production</label>
                                <select name="company" class="form-input">
                                    <option value="" disabled selected>Select company</option>
                                    <% if (typeof companies !== 'undefined' && Array.isArray(companies)) { %>
                                        <% companies.forEach(function(com) { %>
                                            <option value="<%= com._id %>" <%= data.company == com._id ? 'selected' : '' %>><%= com.name %></option>
                                        <% }); %>
                                    <% } %>
                                </select>
                                <% if (typeof errors !== 'undefined' && errors.company) { %>
                                    <div class="error-message text-red-500 text-sm font-bold mt-1">
                                        <%= errors.company %>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                        <div>
                            <label class="form-label">Category</label>
                            <select name="category" class="form-input">
                                <option value="" disabled selected>Select Category</option>
                                <% if (typeof category !== 'undefined' && Array.isArray(category)) { %>
                                    <% category.forEach(function(cat) { %>
                                        <option value="<%= cat._id %>" <%= data.category == cat._id ? 'selected' : '' %>><%= cat.categoryName %></option>
                                    <% }); %>
                                <% } %>
                            </select>
                            <% if (typeof errors !== 'undefined' && errors.category) { %>
                                <div class="error-message text-red-500 text-sm font-bold mt-1">
                                  <%= errors.category %>
                                </div>
                            <% } %>
                        </div>
                    </div>
                    <div>
                        <label class="form-label">Description</label>
                        <textarea name="description" rows="4" class="form-input"><%= data ? data.description : game.description %></textarea>
                    </div>
                    <% if (typeof errors !== 'undefined' && errors.description) { %>
                        <div class="error-message text-red-500 text-sm font-bold mt-1">
                          <%= errors.description %>
                        </div>
                    <% } %>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                            <label class="form-label">Release Date</label>
                            <input type="date" name="releaseDate" class="form-input" value="<%= data.releaseDate ? data.releaseDate : '' %>">
                            <% if (typeof errors !== 'undefined' && errors.releaseDate) { %>
                                <div class="error-message text-red-500 text-sm font-bold mt-1">
                                  <%= errors.releaseDate %>
                                </div>
                            <% } %>
                        </div>
                        <div>
                            <label class="form-label">Stock Quantity</label>
                            <input type="number" name="stockQuantity" class="form-input" value="<%= data.stockQuantity ? data.stockQuantity : '' %>">
                            <% if (typeof errors !== 'undefined' && errors.stockQuantity) { %>
                                <div class="error-message text-red-500 text-sm font-bold mt-1">
                                  <%= errors.stockQuantity %>
                                </div>
                            <% } %>
                        </div>
                        <div>
                            <label class="form-label">Status</label>
                            <select name="status" class="form-input" required>
                              
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="w-full flex flex-col sm:flex-row justify-center items-center gap-4 mt-8">
                    <button type="button"
                      class="inline-flex items-center justify-center px-5 py-2.5 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-100 transition"
                      onclick="window.history.back()">
                      <i class="fas fa-arrow-left mr-2"></i>
                      Go Back
                    </button>
                  
                    <button type="submit"
                      class="inline-flex items-center justify-center px-6 py-2.5 bg-purple-600 text-white font-medium rounded-lg hover:bg-purple-700 transition">
                      <i class="fas fa-save mr-2"></i>
                      Save Game
                    </button>
                  </div>
                  
            </div>
            <!-- Submit Buttons -->
        
        </form>
    </div>
    <!-- Add Crop Modal -->
    <div id="cropModal" class="crop-modal">
        <div class="crop-modal-content">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold text-gray-900">Crop Image</h3>
                <button onclick="closeCropModal()" class="text-gray-400 hover:text-gray-900">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="crop-container">
                <img id="cropImage" class="crop-image">
            </div>
            <div class="crop-buttons">
                <button onclick="closeCropModal()" class="btn-secondary">Cancel</button>
                <button onclick="applyCrop()" class="btn-primary">Apply Crop</button>
            </div>
        </div>
    </div>
    <!-- Your JS remains unchanged -->
   

<script>



    const MAX_SCREENSHOTS = 4;
    let screenshotCount = 0;
    let cropper = null;
    let currentCropType = null;
    let currentFile = null;

    // Handle cover image upload
    document.getElementById('coverImageUpload').addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            if (!file.type.startsWith('image/')) {
                alert('Please select an image file');
                return;
            }
            openCropModal(file, 'cover');
        }
    });

    // Handle screenshot upload
    document.getElementById('screenshotUpload').addEventListener('change', function(event) {
        const files = Array.from(event.target.files);
        const remainingSlots = MAX_SCREENSHOTS - screenshotCount;
        
        if (files.length > remainingSlots) {
            alert(`You can only add ${remainingSlots} more screenshot${remainingSlots === 1 ? '' : 's'}`);
            return;
        }

        // Process only the first file if multiple are selected
        const file = files[0];
        if (file) {
            if (!file.type.startsWith('image/')) {
                alert('Please select only image files');
                return;
            }
            openCropModal(file, 'screenshot');
        }
        
        // Clear the input to allow selecting the same file again
        event.target.value = '';
    });

    // Handle screenshot removal
    document.getElementById('screenshotsContainer').addEventListener('click', function(e) {
        const removeBtn = e.target.closest('.screenshot-remove-btn');
        if (removeBtn) {
            const screenshotId = removeBtn.dataset.id;
            const previewElement = document.querySelector(`.screenshot-preview[data-id="${screenshotId}"]`);
            
            if (previewElement) {
                previewElement.remove();
                screenshotCount--;
                
                if (screenshotCount < MAX_SCREENSHOTS) {
                    document.getElementById('addScreenshotBtn').style.display = '';
                }
            }
        }
    });

    // Clear cover image
    function clearCoverPreview() {
        const coverPreviewContainer = document.getElementById('coverPreviewContainer');
        const coverPreviewImage = document.getElementById('coverPreviewImage');
        const coverImageUpload = document.getElementById('coverImageUpload');
        
        // Clear the preview
        coverPreviewImage.src = '';
        coverPreviewContainer.classList.add('hidden');
        
        // Clear the file input
        coverImageUpload.value = '';
        
        // Remove any existing file from the input
        const dataTransfer = new DataTransfer();
        coverImageUpload.files = dataTransfer.files;
    }

    function removeScreenshot(screenshotId) {
        const previewElement = document.querySelector(`.screenshot-preview[data-id="${screenshotId}"]`);
        if (previewElement) {
            previewElement.remove();
            updateScreenshotCount();
        }
    }

    function updateScreenshotCount() {
        const currentScreenshots = document.querySelectorAll('.screenshot-preview').length;
        const addButton = document.getElementById('addScreenshotBtn');
        
        if (currentScreenshots >= MAX_SCREENSHOTS) {
            addButton.style.display = 'none';
        } else {
            addButton.style.display = 'flex';
        }
    }

    // Add event listeners for remove buttons
    document.addEventListener('DOMContentLoaded', function() {

        document.querySelectorAll('input, textarea, select').forEach(function (el) {
        el.addEventListener('input', function () {
            let found = false;
            let current = el;
            // Traverse up to 3 parent levels
            for (let i = 0; i < 3 && current && !found; i++) {
                let next = current.nextElementSibling;
                while (next) {
                    if (
                        next.classList &&
                        (next.classList.contains('error-message') || next.classList.contains('text-red-500'))
                    ) {
                        next.style.display = 'none';
                        found = true;
                        break;
                    }
                    // Stop if we hit another input, textarea, select, or form group
                    if (
                        next.tagName === 'INPUT' ||
                        next.tagName === 'TEXTAREA' ||
                        next.tagName === 'SELECT' ||
                        next.classList.contains('form-input') ||
                        next.classList.contains('form-label')
                    ) {
                        break;
                    }
                    next = next.nextElementSibling;
                }
                current = current.parentElement;
            }
        });
    });
        
        // Add click event listener for cover image remove button
        const coverRemoveBtn = document.querySelector('.cover-remove-btn');
        if (coverRemoveBtn) {
            coverRemoveBtn.addEventListener('click', clearCoverPreview);
        }

        // Add click event listener for screenshot remove buttons
        document.getElementById('screenshotsContainer').addEventListener('click', function(e) {
            const removeBtn = e.target.closest('.screenshot-remove-btn');
            if (removeBtn) {
                const screenshotId = removeBtn.closest('.screenshot-preview').dataset.id;
                removeScreenshot(screenshotId);
            }
        });
    });

    // Handle drag and drop
    function setupDragAndDrop(dropArea, fileInput) {
        if (!dropArea) return;
        
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });
        
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => {
                dropArea.classList.add('border-blue-500');
            }, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => {
                dropArea.classList.remove('border-blue-500');
            }, false);
        });
        
        dropArea.addEventListener('drop', (e) => {
            const dt = e.dataTransfer;
            const files = dt.files;
            
            if (files.length > 0) {
                const file = files[0]; // Only take the first file
                if (fileInput.id === 'coverImageUpload') {
                    openCropModal(file, 'cover');
                } else if (fileInput.id === 'screenshotUpload') {
                    openCropModal(file, 'screenshot');
                }
            }
        }, false);
    }

    // Initialize drag and drop
    document.addEventListener('DOMContentLoaded', function() {
        setupDragAndDrop(document.querySelector('.file-upload'), document.getElementById('coverImageUpload'));
        setupDragAndDrop(document.getElementById('addScreenshotBtn'), document.getElementById('screenshotUpload'));
    });

    function initPlatformDropdown() {
        const platformSelectBtn = document.getElementById('platformSelectBtn');
        const platformSelectMenu = document.getElementById('platformSelectMenu');
        const platformInput = document.getElementById('platformInput');
        const selectedPlatform = document.getElementById('selectedPlatform');

        platformSelectBtn.addEventListener('click', () => {
            platformSelectMenu.classList.toggle('hidden');
        });

        platformSelectMenu.querySelectorAll('div').forEach(item => {
            item.addEventListener('click', (e) => {
                const value = e.target.getAttribute('data-value');
                const text = e.target.textContent;
                selectedPlatform.textContent = text;
                platformInput.value = value;
                platformSelectMenu.classList.add('hidden');
            });
        });

        // Close dropdown if clicked outside
        document.addEventListener('click', (e) => {
            if (!platformSelectBtn.contains(e.target) && !platformSelectMenu.contains(e.target)) {
                platformSelectMenu.classList.add('hidden');
            }
        });
    }


    // Initialize nav group headers if they exist
    document.addEventListener('DOMContentLoaded', () => {
        const navGroupHeaders = document.querySelectorAll('.nav-group-header');
        navGroupHeaders.forEach(header => {
            header.addEventListener('click', () => {
                const content = header.nextElementSibling;
                const toggle = header.querySelector('.nav-group-toggle');
                
                if (content && toggle) {
                    content.classList.toggle('show');
                    toggle.classList.toggle('rotated');
                }
            });
        });
    });


    // company drag and drop
    document.addEventListener('DOMContentLoaded', () => {
const platformSelectBtn = document.getElementById('platformSelectBtn');
const platformSelectMenu = document.getElementById('platformSelectMenu');
const companyInput = document.getElementById('companyformInput');
const selectedPlatform = document.getElementById('selectedPlatform');

// Toggle the dropdown menu
platformSelectBtn.addEventListener('click', () => {
    platformSelectMenu.classList.toggle('hidden');
});

// Handle selecting a company from the dropdown
platformSelectMenu.querySelectorAll('div').forEach(item => {
    item.addEventListener('click', (e) => {
        const value = e.target.getAttribute('data-value');
        const text = e.target.textContent;

        // Update the selected company name and hidden input value
        selectedPlatform.textContent = text;
        companyInput.value = value;

        // Hide the dropdown menu
        platformSelectMenu.classList.add('hidden');
    });
});

// Close the dropdown if clicked outside
document.addEventListener('click', (e) => {
    if (!platformSelectBtn.contains(e.target) && !platformSelectMenu.contains(e.target)) {
        platformSelectMenu.classList.add('hidden');
    }
});
});

    function openCropModal(file, type) {
        currentCropType = type;
        currentFile = file;
        const modal = document.getElementById('cropModal');
        const cropImage = document.getElementById('cropImage');
        
        const reader = new FileReader();
        reader.onload = function(e) {
            cropImage.src = e.target.result;
            modal.style.display = 'block';
            
            // Initialize cropper after image is loaded
            cropImage.onload = function() {
                if (cropper) {
                    cropper.destroy();
                }
                
              cropper = new Cropper(cropImage, {
viewMode: 2,
dragMode: 'move',
autoCropArea: 1,
restore: false,
guides: true,
center: true,
highlight: false,
cropBoxMovable: true,
cropBoxResizable: true,
toggleDragModeOnDblclick: false,
});

            };
        };
        reader.readAsDataURL(file);
    }

    function closeCropModal() {
        const modal = document.getElementById('cropModal');
        modal.style.display = 'none';
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
    }

    function applyCrop() {
        if (!cropper) return;

        const canvas = cropper.getCroppedCanvas();

        canvas.toBlob((blob) => {
            const croppedFile = new File([blob], currentFile.name, {
                type: currentFile.type,
                lastModified: new Date().getTime()
            });

            if (currentCropType === 'cover') {  
                // Create a new DataTransfer object
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                
                // Update the file input
                const fileInput = document.getElementById('coverImageUpload');
                fileInput.files = dataTransfer.files;
                
                // Show preview
                const previewImage = document.getElementById('coverPreviewImage');
                previewImage.src = URL.createObjectURL(croppedFile);
                document.getElementById('coverPreviewContainer').classList.remove('hidden');
            } else if (currentCropType === 'screenshot') {
                const screenshotId = `new-${Date.now()}`;
                const previewElement = document.createElement('div');
                previewElement.className = 'screenshot-preview';
                previewElement.dataset.id = screenshotId;

                previewElement.innerHTML = `
                    <div class="relative">
                        <img src="${URL.createObjectURL(croppedFile)}" alt="Screenshot" class="preview-image">
                        <button type="button" class="screenshot-remove-btn absolute top-2 right-2 p-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
                                onclick="removeScreenshot('${screenshotId}')">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;

                // Create a hidden input for the file
                const fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.name = 'screenshots';
                fileInput.style.display = 'none';
                
                // Create a new DataTransfer object and add the file
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                fileInput.files = dataTransfer.files;
                
                previewElement.appendChild(fileInput);

                const addButton = document.getElementById('addScreenshotBtn');
                document.getElementById('screenshotsContainer').insertBefore(previewElement, addButton);

                updateScreenshotCount();
            }
        }, currentFile.type, 0.9); // Added quality parameter for better image quality

        closeCropModal();
    }
</script>
</body>
</html>

