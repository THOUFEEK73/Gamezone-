<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GameZone Admin - Categories</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            background-color: #1f1f1f;
            color: #ffffff;
        }

        .card {
            background-color: #2a2a2a;
            border: 1px solid #333333;
            transition: all 0.2s ease;
        }

        .category-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            border-bottom: 1px solid #333333;
            transition: all 0.2s ease;
        }

        .category-item:last-child {
            border-bottom: none;
        }

        .category-item:hover {
            background: #333333;
        }

        .category-actions {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .action-btn {
            padding: 0.5rem;
            border-radius: 0.5rem;
            transition: all 0.2s ease;
        }

        .edit-btn {
            color: #818cf8;
        }

        .edit-btn:hover {
            background: rgba(129, 140, 248, 0.1);
        }

        .delete-btn {
            color: #ef4444;
        }

        .delete-btn:hover {
            background: rgba(239, 68, 68, 0.1);
        }

        /* Search and Filter Styles */
        .search-input {
            background-color: #2a2a2a;
            border: 1px solid #333333;
            color: #ffffff;
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
            width: 100%;
        }

        .search-input:focus {
            outline: none;
            border-color: #818cf8;
            box-shadow: 0 0 0 2px rgba(129, 140, 248, 0.1);
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.875rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .status-badge.status-active {
            background: rgba(34, 197, 94, 0.2);
            color: #22c55e;
        }

        .status-badge.status-inactive {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }

        /* Modal Styles */
        .modal {
            background: rgba(0, 0, 0, 0.7);
        }

        .modal-content {
            background: #2a2a2a;
            color: #ffffff;
        }

        .form-label {
            color: #ffffff;
        }

        .form-input {
            background-color: #333333;
            border: 1px solid #404040;
            color: #ffffff;
        }

        .form-input:focus {
            border-color: #818cf8;
            box-shadow: 0 0 0 2px rgba(129, 140, 248, 0.1);
        }

        .btn-cancel {
            background: #333333;
            color: #ffffff;
            border: 1px solid #404040;
        }

        .btn-cancel:hover {
            background: #404040;
        }

        .btn-submit {
            background: #818cf8;
            color: #ffffff;
        }

        .btn-submit:hover {
            background: #6366f1;
        }

        /* Pagination Styles */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 2rem;
        }

        .page-item {
            padding: 0.5rem 1rem;
            background: #2a2a2a;
            border: 1px solid #333333;
            color: #ffffff;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .page-item:hover {
            background: #333333;
        }

        .page-item.active {
            background: #818cf8;
            border-color: #818cf8;
        }

        .page-item.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>
<body class="flex h-screen">
    <%- include('partials/sidebar') %>

    <!-- Main Content -->
    <div class="flex-1 ml-72 p-8 main-content bg-[#1f1f1f]">
        <!-- Header -->
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold text-white">Game Platforms</h1>
                <p class="text-gray-400 mt-2">Manage your game platforms</p>
            </div>
            <button id="addCategoryBtn" class="px-6 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-all duration-300">
                <i class="fas fa-plus mr-2"></i>
                Add New Platform
            </button>
        </div>

        <!-- Search and Filter -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div class="flex items-center bg-[#2a2a2a] rounded-lg overflow-hidden col-span-3">
                <input type="text" id="searchInput" placeholder="Search platforms..." 
                       class="bg-transparent px-4 py-2 w-full focus:outline-none text-white">
            </div>
            <select id="statusFilter" class="px-4 py-2 rounded-lg bg-[#2a2a2a] text-white border-none focus:outline-none">
                <option value="all">All Status</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
            </select>
        </div>

        <!-- Categories List -->
        <div class="bg-[#2a2a2a] rounded-lg overflow-hidden">
            <% if(category && category.length > 0){ %>
                <% category.forEach(category=>{ %>
                    <div class="category-item">
                        <div class="text-lg font-medium text-white">
                            <%=category.categoryName%>
                        </div> 
                        <div class="category-actions">
                            <span class="status-badge <%= category.status === 'active' ? 'status-active' : 'status-inactive' %>">
                                <i class="fas fa-circle text-xs"></i>
                                <%= category.status === 'active' ? 'Active' : 'Inactive' %>
                            </span>
                            <button class="action-btn edit-btn" data-category-id="<%=category._id%>" data-category-name="<%=category.CategoryName%>">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="status-toggle" data-category-id="<%=category._id%>" data-status="<%=category.status%>">
                                <i class="fas fa-toggle-<%= category.status === 'active' ? 'on' : 'off' %> text-<%= category.status === 'active' ? 'green-500' : 'red-500' %>"></i> 
                            </button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="category-item">
                    <div class="text-lg font-medium text-gray-400">
                        No categories found
                    </div>
                </div>
            <% } %>
        </div>

        <!-- Pagination -->
        <div class="flex justify-center mt-8">
            <nav class="flex space-x-2">
                <button class="px-3 py-1 rounded-lg bg-[#2a2a2a] text-gray-300 hover:bg-[#333333] transition-colors">Previous</button>
                <button class="px-3 py-1 rounded-lg bg-purple-600 text-white">1</button>
                <button class="px-3 py-1 rounded-lg bg-[#2a2a2a] text-gray-300 hover:bg-[#333333] transition-colors">2</button>
                <button class="px-3 py-1 rounded-lg bg-[#2a2a2a] text-gray-300 hover:bg-[#333333] transition-colors">3</button>
                <button class="px-3 py-1 rounded-lg bg-[#2a2a2a] text-gray-300 hover:bg-[#333333] transition-colors">Next</button>
            </nav>
        </div>
    </div>

    <!-- Add Category Modal -->
    <div id="addCategoryModal" class="modal fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
        <div class="modal-content bg-[#2a2a2a] p-6 rounded-xl w-full max-w-md mx-4">
            <button class="modal-close absolute top-4 right-4 text-gray-400 hover:text-white" id="closeAddModal">
                <i class="fas fa-times"></i>
            </button>
            <div class="modal-header mb-6">
                <h2 class="text-2xl font-bold text-white">Add New platform</h2>
            </div>
            <form id="addCategoryForm" action="/admin/category" method="POST">
                <div class="mb-6">
                    <label class="block text-gray-300 mb-2" for="platformName">Platform Name</label>
                    <input type="text" 
                           id="categoryName" 
                           name="categoryName" 
                           class="w-full px-4 py-2 rounded-lg bg-[#333333] border border-gray-600 text-white focus:outline-none focus:border-purple-500" 
                           placeholder="Enter Platform name" 
                           required>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" 
                            id="cancelAdd" 
                            class="px-4 py-2 bg-[#333333] text-gray-300 rounded-lg hover:bg-[#404040] transition-colors">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
                        Add Platform
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Category Modal -->
   

    <script>
        // Sidebar Navigation Groups
        document.querySelectorAll('.nav-group-header').forEach(header => {
            header.addEventListener('click', () => {
                const content = header.nextElementSibling;
                const toggle = header.querySelector('.nav-group-toggle');
                
                content.classList.toggle('show');
                toggle.classList.toggle('rotated');
            });
        });

        // Mobile Sidebar Toggle
        const sidebarToggle = document.querySelector('.sidebar-toggle');
        const sidebar = document.querySelector('.sidebar');

        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('show');
        });

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', (e) => {
            if (window.innerWidth <= 768) {
                if (!sidebar.contains(e.target) && !sidebarToggle.contains(e.target)) {
                    sidebar.classList.remove('show');
                }
            }
        });

        document.querySelectorAll('.status-toggle').forEach(toggle => {
            toggle.addEventListener('click', async () => {
                const categoryId = toggle.dataset.categoryId;
                const currentStatus = toggle.dataset.status;
                const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
                toggle.disabled = true;

                try {
                    const response = await fetch(`/admin/category/${categoryId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ status: newStatus })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        const categoryItem = toggle.closest('.category-item');
                        const statusBadge = categoryItem.querySelector('.status-badge');
                        const statusIcon = toggle.querySelector('i');

                        // Update status badge
                        statusBadge.className = `status-badge status-${newStatus}`;
                        statusBadge.innerHTML = `
                            <i class="fas fa-circle text-xs"></i>
                            ${newStatus === 'active' ? 'Active' : 'Inactive'}
                        `;

                        // Update toggle button icon and color
                        statusIcon.className = `fas fa-toggle-${newStatus === 'active' ? 'on' : 'off'} ${newStatus === 'active' ? 'text-green-500' : 'text-red-500'}`;
                        
                        // Update data-status attribute
                        toggle.dataset.status = newStatus;
                    }
                } catch (error) {
                    console.error('Error updating category status:', error);
                    alert('Error updating category status. Please try again.');
                } finally {
                    toggle.disabled = false;
                }
            });
        });

        // Add Category Modal Functionality
        const addCategoryModal = document.getElementById('addCategoryModal');
        const addCategoryBtn = document.getElementById('addCategoryBtn');
        const closeAddModal = document.getElementById('closeAddModal');
        const cancelAdd = document.getElementById('cancelAdd');
        const addCategoryForm = document.getElementById('addCategoryForm');

        // Show modal
        addCategoryBtn.addEventListener('click', () => {
            addCategoryModal.classList.remove('hidden');
            addCategoryModal.classList.add('flex');
        });

        // Hide modal function
        const hideAddModal = () => {
            addCategoryModal.classList.add('hidden');
            addCategoryModal.classList.remove('flex');
            addCategoryForm.reset(); // Reset the form when closing
        };

        // Close modal with X button
        closeAddModal.addEventListener('click', hideAddModal);

        // Close modal with Cancel button
        cancelAdd.addEventListener('click', hideAddModal);

        // Close modal when clicking outside
        addCategoryModal.addEventListener('click', (e) => {
            if (e.target === addCategoryModal) {
                hideAddModal();
            }
        });

        // Handle form submission
        addCategoryForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(addCategoryForm);
            
            try {
                const response = await fetch('/admin/category', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        categoryName: formData.get('categoryName')
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    // Reload the page to show the new category
                    window.location.reload();
                } else {
                    alert('Failed to add category. Please try again.');
                }
            } catch (error) {
                console.error('Error adding category:', error);
                alert('Error adding category. Please try again.');
            }
        });

        // Edit Category
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const categoryId = btn.dataset.categoryId;
                const categoryName = btn.dataset.categoryName;
                
                document.getElementById('editCategoryId').value = categoryId;
                document.getElementById('editCategoryName').value = categoryName;
                editCategoryModal.classList.add('show');
            });
        });

        // Close Modals
        const closeModals = () => {
            addCategoryModal.classList.remove('show');
            editCategoryModal.classList.remove('show');
        };

        closeAddModal.addEventListener('click', closeModals);
        closeEditModal.addEventListener('click', closeModals);
        cancelAdd.addEventListener('click', closeModals);
        cancelEdit.addEventListener('click', closeModals);

        // Close modals when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === addCategoryModal || e.target === editCategoryModal) {
                closeModals();
            }
        });

        editCategoryForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const categoryId = document.getElementById('editCategoryId').value;
            const categoryName = document.getElementById('editCategoryName').value;
            
            try {
                // Here you would typically make an API call to update the category
                // For now, we'll just log it
                console.log('Updating category:', categoryId, categoryName);
                
                // Update the category in the list
                const categoryItem = document.querySelector(`.edit-btn[data-category-id="${categoryId}"]`).closest('.category-item');
                categoryItem.querySelector('.text-lg').textContent = categoryName;
                
                // Update the data attribute
                categoryItem.querySelector('.edit-btn').dataset.categoryName = categoryName;
                
                // Reset form and close modal
                editCategoryForm.reset();
                closeModals();
                
                // Show success message
                alert('Category updated successfully!');
            } catch (error) {
                console.error('Error updating category:', error);
                alert('Error updating category. Please try again.');
            }
        });

        // Delete Category
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const categoryId = btn.dataset.categoryId;
                
                if (confirm('Are you sure you want to delete this category?')) {
                    try {
                        // Here you would typically make an API call to delete the category
                        // For now, we'll just log it
                        console.log('Deleting category:', categoryId);
                        
                        // Remove the category from the list
                        btn.closest('.category-item').remove();
                        
                        // Show success message
                        alert('Category deleted successfully!');
                    } catch (error) {
                        console.error('Error deleting category:', error);
                        alert('Error deleting category. Please try again.');
                    }
                }
            });
        });

        // Search and Filter Functionality
        const searchInput = document.getElementById('searchInput');
        const statusFilter = document.getElementById('statusFilter');
        const categoryItems = document.querySelectorAll('.category-item');

        function filterCategories() {
            const searchTerm = searchInput.value.toLowerCase();
            const statusValue = statusFilter.value;

            categoryItems.forEach(item => {
                const categoryName = item.querySelector('.text-lg').textContent.toLowerCase();
                const status = item.querySelector('.status-badge').textContent.trim().toLowerCase();
                
                const matchesSearch = categoryName.includes(searchTerm);
                const matchesStatus = statusValue === 'all' || status.includes(statusValue);
                
                item.style.display = matchesSearch && matchesStatus ? 'flex' : 'none';
            });
        }

        searchInput.addEventListener('input', filterCategories);
        statusFilter.addEventListener('change', filterCategories);

        // Pagination Functionality
        const pageItems = document.querySelectorAll('.page-item');
        let currentPage = 1;

        pageItems.forEach(item => {
            item.addEventListener('click', () => {
                if (item.classList.contains('disabled')) return;
                
                // Remove active class from all items
                pageItems.forEach(pageItem => pageItem.classList.remove('active'));
                
                // Add active class to clicked item
                item.classList.add('active');
                
                // Update current page
                if (!item.querySelector('i')) {
                    currentPage = parseInt(item.textContent);
                } else if (item.querySelector('.fa-chevron-left')) {
                    currentPage = Math.max(1, currentPage - 1);
                } else if (item.querySelector('.fa-chevron-right')) {
                    currentPage = Math.min(3, currentPage + 1);
                }
                
                // Here you would typically make an API call to fetch the next page
                // For now, we'll just log it
                console.log('Current page:', currentPage);
            });
        });
    </script>
</body>
</html> 