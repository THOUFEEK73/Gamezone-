<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My Addresses</title>
    <link rel="stylesheet" href="/styles/styles.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://kit.fontawesome.com/YOUR_KIT.js"
      crossorigin="anonymous"></script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

    <!-- Add in your <head> -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
      integrity="sha512-yNf4+7+2b19UgKPLMiS63HAAKCDUbZ8nPfPf+KFM9gArlJX+lf+EonOxr0E4SkypKs1nfpXcFa9hC1jvObw7xg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer" />

    <link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
      integrity="sha512-yHkG9vSOfKOA3iRr8KXeSpqvqU5p1rMB2D/Fp2NfxM+gFZj1xPU+yYl+K9Dc+gfDfq5hJ6nplCjXNoGHU8Sl1Q=="
      crossorigin="anonymous" referrerpolicy="no-referrer" />
  </head>

  <body class="bg-gray-100 min-h-screen">
    <div class="flex flex-col lg:flex-row min-h-screen">
      <!-- Sidebar -->
      <%- include('partials/sidebar') %>

      <!-- Main Content Area -->
      <main class="flex-1 flex justify-center p-2 sm:p-4">
        <section class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <!-- Title and Button -->
          <div
            class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4">
            <h2 class="text-3xl font-bold text-gray-900">My Addresses</h2>
            <button id="addAddressBtn"
              class="group flex items-center gap-1 px-3 py-1.5 text-sm border border-black text-black bg-transparent rounded-md hover:bg-black hover:text-white transition duration-300 font-medium shadow-sm">
              <i
                class="fas fa-plus text-xs group-hover:text-white transition-all"></i>
              <span>Add a New Address</span>
            </button>

          </div>

          <!-- Address Cards Grid -->
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (address && address.length > 0) { %>
            <% address.forEach(address => { %>
            <div
              class="bg-white border border-gray-200 rounded-2xl p-6 shadow-md hover:shadow-xl transition-all duration-300">
              <!-- Top Section: Type + Icons -->
              <div class="flex justify-between items-start mb-4">
                <div class="flex items-center text-blue-600 font-medium gap-2">
                  <i class="fas fa-home text-lg"></i>
                  <span><%= address.type.charAt(0).toUpperCase() +
                    address.type.slice(1) %></span>
                </div>
                <div class="flex items-center gap-3 text-gray-500">
                  <button onclick="editAddress('<%= address._id %>')"
                    title="Edit"
                    class="p-1 rounded hover:bg-yellow-100 hover:text-yellow-600 transition duration-200">
                    <i data-lucide="pencil-line" class="w-4 h-4"></i>
                  </button>
                  <button onclick="deleteAddress('<%= address._id %>')"
                    title="Delete"
                    class="p-1 rounded hover:bg-red-100 hover:text-red-600 transition duration-200">
                    <i data-lucide="trash-2" class="w-4 h-4"></i>
                  </button>
                </div>

                <script>lucide.createIcons()</script>

              </div>

              <!-- Address Content -->
              <div class="text-sm text-gray-800 space-y-1 mb-4">
                <p class="text-base font-semibold"><%= address.name %></p>
                <p><%= address.street %></p>
                <p><%= address.city %>, <%= address.state %> - <%=
                  address.zipCode %></p>
                <p class="flex items-center gap-2 text-gray-600">
                  <i class="fas fa-phone-alt text-xs text-blue-500"></i>
                  <%= address.phone %>
                </p>
              </div>

              <!-- Default Address Checkbox -->
              <div class="flex items-center mt-2">
                <input type="checkbox" name="isDefault"
                  class="accent-blue-600 h-4 w-4" <%=address.isDefault ?
                  'checked' : '' %> />
                <label class="ml-2 text-sm text-gray-600">Set as default
                  address</label>
              </div>
            </div>
            <% }) %>
            <% } else { %>
            <div class="text-center col-span-full text-gray-400 text-lg py-10">
              No addresses found.
            </div>
            <% } %>
          </div>
        </section>

      </main>
    </div>

    <!-- Address Form Modal -->
    <div id="addressModal"
      class="fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center p-3 hidden">
      <div
        class="bg-white rounded-lg shadow-xl w-full max-w-sm max-h-[90vh] overflow-y-auto">
        <!-- Modal Header -->
        <div class="flex justify-between items-center p-3 border-b">
          <h3 class="text-base font-semibold text-gray-800">Add New Address</h3>
          <button id="closeModal" class="text-gray-500 hover:text-gray-700">
            <i class="fas fa-times"></i>
          </button>
        </div>

        <!-- Modal Body - Address Form -->
        <form id="addressForm" class="p-3">
          <div class="space-y-3">
            <!-- Two Column Layout for Small Form Fields -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <!-- Address Type -->
              <div>
                <label
                  class="block text-xs font-medium text-gray-700 mb-1">Address
                  Type*</label>
                <select name="type"
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                  required>
                  <option value="home">Home</option>
                  <option value="work">Work</option>
                  <option value="billing">Billing</option>
                  <option value="shipping">Shipping</option>
                  <option value="other">Other</option>
                </select>
              </div>

              <!-- Full Name -->
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Full
                  Name*</label>

                <input type="text" name="name"
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
                <div class="text-red-600 text-xs mt-1" id="nameError"></div>
              </div>
            </div>

            <!-- Phone Number -->
            <div>
              <label class="block text-xs font-medium text-gray-700 mb-1">Phone
                Number*</label>
              <input type="tel" name="phone"
                class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
            </div>

            <!-- Street Address -->
            <div>
              <label class="block text-xs font-medium text-gray-700 mb-1">Street
                Address*</label>
              <input type="text" name="street"
                class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
            </div>

            <!-- Two Column Layout for Zip/Country -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <!-- Zip Code -->
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Pin
                  Code*</label>
                <input type="text" name="zipCode" id="pincode"
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
                <small id="pincode-error" style="color: red;"></small>
              </div>

              <!-- Country -->
              <div>
                <label
                  class="block text-xs font-medium text-gray-700 mb-1">Country</label>
                <input type="text" name="country" value="INDIA"
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-100"
                  readonly />
              </div>
            </div>

            <!-- Two Column Layout for City/State -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <!-- City -->
              <div>
                <label
                  class="block text-xs font-medium text-gray-700 mb-1">City</label>
                <input type="text" name="city" id="city" readonly
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
              </div>

              <!-- State -->
              <div>
                <label
                  class="block text-xs font-medium text-gray-700 mb-1">State*</label>
                <input type="text" name="state" id="state" readonly
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
              </div>
            </div>

            <!-- Set as Default -->
            <div class="flex items-center pt-1">
              <input type="checkbox" name="isDefault" id="isDefault"
                value="true"
                class="mr-2 rounded border-gray-300 text-blue-600 focus:ring-0" />
              <label for="isDefault" class="text-xs text-gray-700">Set as
                default address</label>
            </div>
          </div>

          <div class="mt-4 flex justify-end gap-2">
            <button type="button" id="cancelBtn"
              class="px-3 py-1.5 border border-gray-300 rounded-md shadow-sm text-xs font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              Cancel
            </button>
            <button type="submit"
              class="px-3 py-1.5 bg-blue-600 text-white rounded-md shadow-sm text-xs font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              Save Address
            </button>
          </div>
        </form>
      </div>
    </div>


    <!-- edit model -->

     <form id="addressForm" class="p-3">
          <div class="space-y-3">
            <!-- Two Column Layout for Small Form Fields -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <!-- Address Type -->
              <div>
                <label
                  class="block text-xs font-medium text-gray-700 mb-1">Address
                  Type*</label>
                <select name="type"
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                  required>
                  <option value="home">Home</option>
                  <option value="work">Work</option>
                  <option value="billing">Billing</option>
                  <option value="shipping">Shipping</option>
                  <option value="other">Other</option>
                </select>
              </div>

              <!-- Full Name -->
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Full
                  Name*</label>

                <input type="text" name="name"
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
                <div class="text-red-600 text-xs mt-1" id="nameError"></div>
              </div>
            </div>

            <!-- Phone Number -->
            <div>
              <label class="block text-xs font-medium text-gray-700 mb-1">Phone
                Number*</label>
              <input type="tel" name="phone"
                class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
            </div>

            <!-- Street Address -->
            <div>
              <label class="block text-xs font-medium text-gray-700 mb-1">Street
                Address*</label>
              <input type="text" name="street"
                class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
            </div>

            <!-- Two Column Layout for Zip/Country -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <!-- Zip Code -->
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Pin
                  Code*</label>
                <input type="text" name="zipCode" id="pincode"
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
                <small id="pincode-error" style="color: red;"></small>
              </div>

              <!-- Country -->
              <div>
                <label
                  class="block text-xs font-medium text-gray-700 mb-1">Country</label>
                <input type="text" name="country" value="INDIA"
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 bg-gray-100"
                  readonly />
              </div>
            </div>

            <!-- Two Column Layout for City/State -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <!-- City -->
              <div>
                <label
                  class="block text-xs font-medium text-gray-700 mb-1">City</label>
                <input type="text" name="city" id="city" readonly
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
              </div>

              <!-- State -->
              <div>
                <label
                  class="block text-xs font-medium text-gray-700 mb-1">State*</label>
                <input type="text" name="state" id="state" readonly
                  class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500" />
              </div>
            </div>

            <!-- Set as Default -->
            <div class="flex items-center pt-1">
              <input type="checkbox" name="isDefault" id="isDefault"
                value="true"
                class="mr-2 rounded border-gray-300 text-blue-600 focus:ring-0" />
              <label for="isDefault" class="text-xs text-gray-700">Set as
                default address</label>
            </div>
          </div>

          <div class="mt-4 flex justify-end gap-2">
            <button type="button" id="cancelBtn"
              class="px-3 py-1.5 border border-gray-300 rounded-md shadow-sm text-xs font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              Cancel
            </button>
            <button type="submit"
              class="px-3 py-1.5 bg-blue-600 text-white rounded-md shadow-sm text-xs font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              update Address
            </button>
          </div>
        </form>

    <!-- Delete Confirmation Modal -->
<div id="deleteConfirmModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden">
  <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-xs text-center">
    <h3 class="text-lg font-semibold mb-4 text-gray-800">Delete Address</h3>
    <p class="mb-6 text-gray-600">Are you sure you want to delete this address?</p>
    <div class="flex justify-center gap-4">
      <button id="cancelDeleteBtn" class="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300 text-gray-700">Cancel</button>
      <button id="confirmDeleteBtn" class="px-4 py-2 rounded bg-red-600 hover:bg-red-700 text-white">Delete</button>
    </div>
  </div>
</div>



    <script>
    document.addEventListener("DOMContentLoaded", () => {
      const modal = document.getElementById("addressModal");
      const addBtn = document.getElementById("addAddressBtn");
      const closeBtn = document.getElementById("closeModal");
      const cancelBtn = document.getElementById("cancelBtn");
      const form = document.getElementById("addressForm");

      document.getElementById('addressForm').reset()

      // Open Modal
      addBtn.addEventListener("click", () => {
        modal.classList.remove("hidden");
      });

      // Close Modal with Reset
      const closeModal = () => {
        modal.classList.add("hidden");
        form.reset();
      };

      closeBtn.addEventListener("click", closeModal);
      cancelBtn.addEventListener("click", closeModal);

      // Form Submit
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        const addressData = {};

        for (const [key, value] of formData.entries()) {
          addressData[key] = value;
        }

        // Convert checkbox to boolean
        addressData.isDefault = formData.has("isDefault");


        console.log("Submitting this address:", addressData); // Debug log

        try {
          const response = await fetch("/post-Address", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(addressData),
          });

          if (response.ok) {
            const result = await response.json();
            console.log("Address saved:", result);
            location.reload(); // Refresh page
          } else {
            const errorData = await response.json();
            console.error("Failed to save address:", errorData.message);
          }
        } catch (error) {
          console.error("Error submitting form:", error); // Proper error logging
        }
      });
    });


    // pincode api functionality

    document.getElementById('pincode').addEventListener('input',async function(){
      const pin  = this.value;
      const errorElement = document.getElementById('pincode-error');
      if(pin.length===6){
        try{
       const res = await fetch(`/location?pincode=${pin}`);
        const data  = await res.json();

        if(data.city && data.state){
          document.getElementById('city').value = data.city;
          document.getElementById('state').value = data.state;
          errorElement.textContent = "";
        }else{

          errorElement.textContent = 'Invalid or unknown pincode';
          document.getElementById('city').value = '';
          document.getElementById('state').value = '';

        }
      }catch(error){
        console.error('Fetch error',error);
        errorElement.textContent = 'Server error.Try again.';
        
      }
      }else{
        errorElement.textContent = "";
      }
    })


  let addressToDelete = null;

window.deleteAddress = function(addressId) {
  addressToDelete = addressId;
  document.getElementById('deleteConfirmModal').classList.remove('hidden');
};

document.getElementById('cancelDeleteBtn').onclick = function() {
  addressToDelete = null;
  document.getElementById('deleteConfirmModal').classList.add('hidden');
};

document.getElementById('confirmDeleteBtn').onclick = async function() {
  if (!addressToDelete) return;
  try {
    const response = await fetch(`deleteAddress/${addressToDelete}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    document.getElementById('deleteConfirmModal').classList.add('hidden');
    addressToDelete = null;
    if (response.ok) {
      location.reload();
    }
    // Optionally handle errors here
  } catch (error) {
    console.error('Error deleting address', error);
    document.getElementById('deleteConfirmModal').classList.add('hidden');
    addressToDelete = null;
  }
};




  </script>
  </body>

</html>